WARNING:root:gcloud not found in PATH.
INFO:root:Successfully integrated benchmark: wxwidgets_wxwidgets.
INFO:root:Please run "make test-run-afl-wxwidgets_wxwidgets" to test integration.
#1 [internal] load build definition from Dockerfile
#1 sha256:ccd1b406bb100bfefc96579ce63104774a8fc447fddc469bfc60ff640f0e3c2e
#1 transferring dockerfile: 930B done
#1 DONE 0.1s

#2 [internal] load .dockerignore
#2 sha256:45d709db4fec2d2499cce73bc5c3e725ec2f31b7c574b05f87e792fa5bc11e7f
#2 transferring context: 2B done
#2 DONE 0.1s

#3 [internal] load metadata for gcr.io/oss-fuzz-base/base-builder:latest
#3 sha256:f10dc39cc9d418a5bc416dead31a1902b6821fdae909cd3b08f7a3fd1faba7b5
#3 DONE 0.4s

#9 [internal] load build context
#9 sha256:fc1f28ab3c14fb71d7306212b92564bb3c4465dfee8600dcb4d10db47f214755
#9 DONE 0.0s

#5 [1/5] FROM gcr.io/oss-fuzz-base/base-builder@sha256:41d7bbe7827592680a606c9bba1aeb6e23c7502ce8b633923b06542f4c706e7c
#5 sha256:660db69324ed478291dd329cbbfe422dccbc173f9ab806c069fac341073eab8c
#5 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/builders/benchmark/wxwidgets_wxwidgets
#4 sha256:d95a21aff0d748c3a48ad27d16856aff82dc81f20da54ef36ae00d9727e4695e
#4 ERROR: gcr.io/fuzzbench/builders/benchmark/wxwidgets_wxwidgets:latest: not found

#6 [2/5] RUN apt-get update && apt-get install -y make
#6 sha256:9b70c01a26a944fca245ade6a846c8484655226a5a8b3698e60e5cc1ec1cf881
#6 CACHED

#9 [internal] load build context
#9 sha256:fc1f28ab3c14fb71d7306212b92564bb3c4465dfee8600dcb4d10db47f214755
#9 transferring context: 1.04kB done
#9 DONE 0.1s

#7 [3/5] RUN git clone --depth 1 https://github.com/wxWidgets/wxWidgets.git wxwidgets
#7 sha256:60127b1f912d2b16216f2f6a608d2f15c5b447aa69d9c9827d4281170cd366a4
#7 0.432 Cloning into 'wxwidgets'...
#7 DONE 7.8s

#8 [4/5] WORKDIR wxwidgets
#8 sha256:30cb0df1c61df6e9e6937a67dff036a401a6316d3e1698fe3d965c3ce505850d
#8 DONE 0.1s

#10 [5/5] COPY build.sh /src/
#10 sha256:042145502fc092fb596edf8661fd586f6958e85a1355f25f52475e1a3b896441
#10 DONE 0.1s

#11 exporting to image
#11 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#11 exporting layers done
#11 writing image sha256:47ef6a41740e5252b23313b026abbf6ceaf62c661483454d56df98314b959c8d done
#11 naming to gcr.io/fuzzbench/builders/benchmark/wxwidgets_wxwidgets done
#11 DONE 0.1s

#12 exporting cache
#12 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#12 preparing build cache for export done
#12 DONE 0.0s
------
 > importing cache manifest from gcr.io/fuzzbench/builders/benchmark/wxwidgets_wxwidgets:
------
#1 [internal] load build definition from builder.Dockerfile
#1 sha256:de5928b7c4b2ed0e488fbc130f7c37262bee81f20812d31e1012ad4442c24bff
#1 transferring dockerfile: 1.35kB done
#1 DONE 0.0s

#2 [internal] load .dockerignore
#2 sha256:60d2fbf1e3865d2e332018d4df959961229b52462a646acc13ecda98b3d92d15
#2 transferring context: 2B done
#2 DONE 0.1s

#3 [internal] load metadata for gcr.io/fuzzbench/builders/benchmark/wxwidgets_wxwidgets:latest
#3 sha256:b83337ad41cb4b944085281e7357efd1924a21b0515c1b5f36e2e5a4c0f2af8a
#3 DONE 0.0s

#5 [1/3] FROM gcr.io/fuzzbench/builders/benchmark/wxwidgets_wxwidgets
#5 sha256:73917cda3e59fa8cf8bc783a0d1d9a723a89a25610b0df6706521a2f3cca5f41
#5 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets-intermediate
#4 sha256:e4e287ea17737f3e0d7f0ded67325c004e94fcef2f8f8c8f50d673502e5eeaa0
#4 ERROR: gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets-intermediate:latest: not found

#5 [1/3] FROM gcr.io/fuzzbench/builders/benchmark/wxwidgets_wxwidgets
#5 sha256:73917cda3e59fa8cf8bc783a0d1d9a723a89a25610b0df6706521a2f3cca5f41
#5 DONE 1.4s

#6 [2/3] RUN git clone https://github.com/google/AFL.git /afl &&     cd /afl &&     git checkout 61037103ae3722c8060ff7082994836a794f978e &&     AFL_NO_X86=1 make
#6 sha256:89224fb0186b104983ca632280a804633f3378afc41910d6307a9a4a9a589e3c
#6 0.386 Cloning into '/afl'...
#6 1.259 Note: switching to '61037103ae3722c8060ff7082994836a794f978e'.
#6 1.259 
#6 1.259 You are in 'detached HEAD' state. You can look around, make experimental
#6 1.259 changes and commit them, and you can discard any commits you make in this
#6 1.259 state without impacting any branches by switching back to a branch.
#6 1.259 
#6 1.259 If you want to create a new branch to retain commits you create, you may
#6 1.259 do so (now or later) by using -c with the switch command. Example:
#6 1.259 
#6 1.259   git switch -c <new-branch-name>
#6 1.259 
#6 1.259 Or undo this operation with:
#6 1.259 
#6 1.259   git switch -
#6 1.259 
#6 1.259 Turn off this advice by setting config variable advice.detachedHead to false
#6 1.259 
#6 1.259 HEAD is now at 6103710 Fix a typo filename comparison in the fuzzer (#139)
#6 1.276 [!] Note: skipping x86 compilation checks (AFL_NO_X86 set).
#6 1.277 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-gcc.c -o afl-gcc -ldl
#6 1.450 set -e; for i in afl-g++ afl-clang afl-clang++; do ln -sf afl-gcc $i; done
#6 1.454 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-fuzz.c -o afl-fuzz -ldl
#6 4.061 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-showmap.c -o afl-showmap -ldl
#6 4.372 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-tmin.c -o afl-tmin -ldl
#6 4.797 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-gotcpu.c -o afl-gotcpu -ldl
#6 4.941 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-analyze.c -o afl-analyze -ldl
#6 5.335 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-as.c -o afl-as -ldl
#6 5.584 ln -sf afl-as as
#6 5.586 [!] Note: skipping build tests (you may need to use LLVM or QEMU mode).
#6 5.588 [+] LLVM users: see llvm_mode/README.llvm for a faster alternative to afl-gcc.
#6 5.589 [+] All done! Be sure to review README - it's pretty short and useful.
#6 DONE 6.5s

#7 [3/3] RUN apt-get update &&     apt-get install wget -y &&     wget https://raw.githubusercontent.com/llvm/llvm-project/5feb80e748924606531ba28c97fe65145c65372e/compiler-rt/lib/fuzzer/afl/afl_driver.cpp -O /afl/afl_driver.cpp &&     clang -Wno-pointer-sign -c /afl/llvm_mode/afl-llvm-rt.o.c -I/afl &&     clang++ -stdlib=libc++ -std=c++11 -O2 -c /afl/afl_driver.cpp &&     ar r /libAFL.a *.o
#7 sha256:484c92f712afde2360b549e0dc524333d8a604019160bafd7a3f72154167c1b4
#7 0.802 Hit:1 http://ppa.launchpad.net/git-core/ppa/ubuntu focal InRelease
#7 0.802 Hit:2 http://archive.ubuntu.com/ubuntu focal InRelease
#7 0.802 Get:3 http://archive.ubuntu.com/ubuntu focal-updates InRelease [114 kB]
#7 0.882 Get:4 http://archive.ubuntu.com/ubuntu focal-backports InRelease [108 kB]
#7 0.920 Hit:5 http://security.ubuntu.com/ubuntu focal-security InRelease
#7 1.696 Fetched 222 kB in 1s (222 kB/s)
#7 1.696 Reading package lists...
#7 3.442 Reading package lists...
#7 4.859 Building dependency tree...
#7 5.070 Reading state information...
#7 5.317 wget is already the newest version (1.20.3-1ubuntu2).
#7 5.317 0 upgraded, 0 newly installed, 0 to remove and 1 not upgraded.
#7 5.328 --2022-02-17 16:43:53--  https://raw.githubusercontent.com/llvm/llvm-project/5feb80e748924606531ba28c97fe65145c65372e/compiler-rt/lib/fuzzer/afl/afl_driver.cpp
#7 5.331 Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.111.133, 185.199.108.133, ...
#7 5.333 Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.
#7 5.356 HTTP request sent, awaiting response... 200 OK
#7 5.526 Length: 9177 (9.0K) [text/plain]
#7 5.526 Saving to: '/afl/afl_driver.cpp'
#7 5.527 
#7 5.527      0K ........                                              100% 6.32M=0.001s
#7 5.528 
#7 5.528 2022-02-17 16:43:53 (6.32 MB/s) - '/afl/afl_driver.cpp' saved [9177/9177]
#7 5.528 
#7 7.255 ar: creating /libAFL.a
#7 DONE 7.7s

#8 exporting to image
#8 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#8 exporting layers done
#8 writing image sha256:a65d2de7db5620f2aeb59a9e4cd03de72a25944be9d610e3edfe67c24cba239a done
#8 naming to gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets-intermediate done
#8 DONE 0.1s

#9 exporting cache
#9 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#9 preparing build cache for export done
#9 DONE 0.0s
------
 > importing cache manifest from gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets-intermediate:
------
#1 [internal] load build definition from Dockerfile
#1 sha256:52f0ba019f3460460ed52a4d2279025c885da46df4429842fe3eff039b6f9e84
#1 transferring dockerfile: 2.00kB done
#1 DONE 0.1s

#2 [internal] load .dockerignore
#2 sha256:d28848708dd6da9698feefb80b9a20154c117eaafe031549ef85b85d598c3347
#2 transferring context: 34B done
#2 DONE 0.1s

#3 [internal] load metadata for docker.io/library/ubuntu:xenial
#3 sha256:f62bae18ed588840f045c881b2502661f2a89578a2f8f99b83f5200ee83dd25b
#3 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/base-image
#4 sha256:9b220ebb4d4daceed1b96df9b6dca076e762f1cd612574f010b82d5b9e5ad896
#4 DONE 0.0s

#5 [1/7] FROM docker.io/library/ubuntu:xenial
#5 sha256:14dd403f25ae9e519bd44f27dc17af7ce80f5a4f9f48ca88108364e67ec5d360
#5 DONE 0.0s

#8 [internal] load build context
#8 sha256:2918c55aef278f3c0d4c48ccbe9c9e3837443913572998c4eff80fc318ed88fb
#8 transferring context: 559B 0.2s done
#8 DONE 0.2s

#10 [5/7] RUN pip3 install -r /requirements.txt
#10 sha256:6cda1e30dd88e971919428ad848501e74c0ac86af9c84ee61c11c994c00cfc70
#10 CACHED

#11 [6/7] RUN apt-get update -y && apt-get install -y     apt-transport-https     lsb-release
#11 sha256:9feffe9fea0e214b65e1fc20b47d0a92bf66bd6a05be8e374b0b5b1429c179e1
#11 CACHED

#6 [2/7] RUN apt-get update -y && apt-get install -y     build-essential     rsync     curl     zlib1g-dev     libncurses5-dev     libgdbm-dev     libnss3-dev     libssl-dev     libreadline-dev     libffi-dev     virtualenv     libbz2-dev     liblzma-dev     libsqlite3-dev
#6 sha256:3a1b0960f17eed529eaae93dc8fd3554f2743dd584d8fa569cdbe6bc734371ac
#6 CACHED

#7 [3/7] RUN cd /tmp/ &&     curl -O https://www.python.org/ftp/python/3.8.6/Python-3.8.6.tar.xz &&     tar -xvf Python-3.8.6.tar.xz &&     cd Python-3.8.6 &&     ./configure --enable-loadable-sqlite-extensions --enable-optimizations &&     make -j install &&     rm -r /tmp/Python-3.8.6.tar.xz /tmp/Python-3.8.6
#7 sha256:c5b9d1fb3371e84dbc60b76e7b2f8d5913bc93bcd4910ab65daa03e7b2ec4bb0
#7 CACHED

#9 [4/7] COPY ./requirements.txt /
#9 sha256:26f7f8ef24dc050ef70bede662baffaab3dcde0f324d9fade0c7f2a920ca836f
#9 CACHED

#12 [7/7] RUN CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" &&     echo "deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main"     | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list &&     curl https://packages.cloud.google.com/apt/doc/apt-key.gpg     | apt-key add - &&     apt-get update -y &&     apt-get install -y google-cloud-sdk
#12 sha256:71e579c7695fd31aba694342ef70182e5032e4e83fc56862321b1c7a3da07fd8
#12 CACHED

#13 exporting to image
#13 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#13 exporting layers done
#13 writing image sha256:4194ef1d23fc015b139743048663e651b15a8f2752b53c16e7b7e39247b68536 0.0s done
#13 naming to gcr.io/fuzzbench/base-image done
#13 DONE 0.2s

#14 exporting cache
#14 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#14 preparing build cache for export done
#14 DONE 0.0s
#1 [internal] load build definition from Dockerfile
#1 sha256:0e1d454852561170b4c1e39ed8420c1b30915e2e4fcefd33b3e5067c30dd2d26
#1 transferring dockerfile: 2.22kB done
#1 DONE 0.1s

#2 [internal] load .dockerignore
#2 sha256:52322ad0a602dd398ae58890173ed4eae0a82ec8ad5d5c62c643f7d9d10ff78b
#2 transferring context: 34B done
#2 DONE 0.1s

#3 [internal] load metadata for gcr.io/fuzzbench/base-image:latest
#3 sha256:932022888f650cc455b10eb5123bb08c0cccacac29a693e69314abbfd28a72c3
#3 DONE 0.0s

#4 [internal] load metadata for gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets-intermediate:latest
#4 sha256:321580099111fa37157eaaa5e68f15f61c1b237c57325ac0024e32498bd7fb48
#4 DONE 0.0s

#5 importing cache manifest from gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets
#5 sha256:19688c949cd0adac8c63469c17692175f822498c447d97be1e1cf112b4dd4334
#5 ...

#12 [internal] load build context
#12 sha256:c59a4356bc7a991e47aae0cc78b8c6e0b49f383165fe3ec9a8ccdc067aba1bbb
#12 DONE 0.0s

#7 [base-image 1/1] FROM gcr.io/fuzzbench/base-image
#7 sha256:4d07825694520f8b6f6a0d8592dbd345433361ae044cb7f06706c5a95e3daaad
#7 DONE 0.0s

#6 [stage-1  1/13] FROM gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets-intermediate
#6 sha256:a300fe06f4e13e3b52dc6c380d8e8d50e2ccf8861a582296ce82e53d998e08e4
#6 DONE 0.0s

#5 importing cache manifest from gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets
#5 sha256:19688c949cd0adac8c63469c17692175f822498c447d97be1e1cf112b4dd4334
#5 ERROR: gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets:latest: not found

#7 [base-image 1/1] FROM gcr.io/fuzzbench/base-image
#7 sha256:4d07825694520f8b6f6a0d8592dbd345433361ae044cb7f06706c5a95e3daaad
#7 CACHED

#12 [internal] load build context
#12 sha256:c59a4356bc7a991e47aae0cc78b8c6e0b49f383165fe3ec9a8ccdc067aba1bbb
#12 transferring context: 669.88kB 0.1s done
#12 DONE 0.1s

#6 [stage-1  1/13] FROM gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets-intermediate
#6 sha256:a300fe06f4e13e3b52dc6c380d8e8d50e2ccf8861a582296ce82e53d998e08e4
#6 DONE 0.6s

#8 [stage-1  2/13] COPY --from=base-image /usr/local/bin/python3* /usr/local/bin/
#8 sha256:1f838b4af93acda4195ea70e55d26fba7f7e7f86806080dfba63d3d85aa105aa
#8 DONE 0.6s

#9 [stage-1  3/13] COPY --from=base-image /usr/local/lib/python3.8 /usr/local/lib/python3.8
#9 sha256:5dbb85e4a936f369672c6da6725a7a7b61302db1f8861c3cc8c1453a59d8c2dc
#9 DONE 14.9s

#10 [stage-1  4/13] COPY --from=base-image /usr/local/include/python3.8 /usr/local/include/python3.8
#10 sha256:df4582014b4bbbc50b4078dcff42e7c01b1ed52c19b44707900d4dc2c6e3de73
#10 DONE 0.2s

#11 [stage-1  5/13] COPY --from=base-image /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
#11 sha256:406d186d7292b0fc47000968df942f4cc2dc017c7d5e6be636bb53266040e956
#11 DONE 21.5s

#13 [stage-1  6/13] COPY fuzzers /src/fuzzers
#13 sha256:689bcfd3465b4097dd44c14ca77d6773cee2fd4e08770bcd096100fd725f866a
#13 DONE 0.4s

#14 [stage-1  7/13] RUN touch /src/__init__.py
#14 sha256:f801a88a8801a347aa506ef5a62e1975d8a0e2d417c8e1a48fc22714ea3f9152
#14 DONE 1.1s

#15 [stage-1  8/13] COPY benchmarks/wxwidgets_wxwidgets/benchmark.yaml /
#15 sha256:97f1d2c4084f6d30c187b2b0ba03d892121e4ed3ae6077643c7f64dc4e0f8f00
#15 DONE 0.4s

#16 [stage-1  9/13] RUN mkdir /opt/fuzzbench/
#16 sha256:8a6083d71135d3b5dcd1926940a9e62d1c583dbd802d6da40a1dc9d5a3650320
#16 DONE 0.8s

#17 [stage-1 10/13] COPY docker/benchmark-builder/checkout_commit.py /opt/fuzzbench/
#17 sha256:3466e8b94130a8ca2e3b9d01e88951dda774fda54580f12cd81af53dcaaa13fe
#17 DONE 0.4s

#18 [stage-1 11/13] RUN export CHECKOUT_COMMIT=$(cat /benchmark.yaml | tr -d ' ' | grep 'commit:' | cut -d ':' -f2) &&     python3 -u /opt/fuzzbench/checkout_commit.py $CHECKOUT_COMMIT /src
#18 sha256:c3c3f5b868d6c4fb4b3b698554e3bffb6bacdec3e22568ddb02b5572e0baaf67
#18 0.565 Checking out commit ee358c11
#18 102.0 From https://github.com/wxWidgets/wxWidgets
#18 102.0  * [new tag]               v3.1.0     -> v3.1.0
#18 102.0  * [new tag]               v3.1.1     -> v3.1.1
#18 102.0  * [new tag]               v3.1.1-rc  -> v3.1.1-rc
#18 102.0  * [new tag]               v3.1.2     -> v3.1.2
#18 102.0  * [new tag]               v3.1.3     -> v3.1.3
#18 102.0  * [new tag]               v3.1.4     -> v3.1.4
#18 102.0  * [new tag]               v3.1.4-rc1 -> v3.1.4-rc1
#18 102.0  * [new tag]               v3.1.5     -> v3.1.5
#18 109.1 error: pathspec 'ee358c11' did not match any file(s) known to git
#18 109.4 error: pathspec 'ee358c11' did not match any file(s) known to git
#18 109.4 error: pathspec 'ee358c11' did not match any file(s) known to git
#18 109.5 Checkout unsuccessful.
#18 DONE 110.4s

#19 [stage-1 12/13] RUN echo "#!/bin/bash\nPYTHONPATH=/src python3 -u -c "from fuzzers import utils; utils.initialize_env(); from fuzzers.afl import fuzzer; fuzzer.build()"" > /usr/bin/fuzzer_build &&     chmod +x /usr/bin/fuzzer_build
#19 sha256:d0f6b7742a54bcfe497f58c6443ce93b9e779c74ce23f93e283b2d286757a7db
#19 DONE 1.8s

#20 [stage-1 13/13] RUN echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi
#20 sha256:4b0f98d4d0b76127513e85ab0a7faaabbbf7d44642527d0cf99e4d62d395b21b
#20 0.462 Run fuzzer_build to build the target
#20 0.608 FUZZ_TARGET = wxwidgets
#20 0.608 CFLAGS = -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument -O3
#20 0.608 CXXFLAGS = -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument -stdlib=libc++ -O3
#20 0.621 Building benchmark wxwidgets_wxwidgets with fuzzer afl
#20 0.624 + ./configure --without-subdirs --disable-sys-libs --disable-gui
#20 0.901 checking build system type... x86_64-pc-linux-gnu
#20 0.989 checking host system type... x86_64-pc-linux-gnu
#20 1.089 checking for gcc... clang
#20 1.158 checking whether the C compiler works... yes
#20 1.286 checking for C compiler default output file name... a.out
#20 1.288 checking for suffix of executables... 
#20 1.402 checking whether we are cross compiling... no
#20 1.543 checking for suffix of object files... o
#20 1.574 checking whether we are using the GNU C compiler... yes
#20 1.602 checking whether clang accepts -g... yes
#20 1.624 checking for clang option to accept ISO C89... none needed
#20 1.669 checking whether we are using the Intel C compiler... no
#20 1.703 checking how to run the C preprocessor... clang -E
#20 1.802 checking for grep that handles long lines and -e... /usr/bin/grep
#20 1.806 checking for egrep... /usr/bin/grep -E
#20 1.810 checking whether clang needs -traditional... no
#20 1.917 checking whether we are using the GNU C++ compiler... yes
#20 1.946 checking whether clang++ accepts -g... yes
#20 1.970 checking whether we are using the Intel C++ compiler... no
#20 2.004 checking whether we are using the Sun C++ compiler... no
#20 2.040 checking for ar... ar
#20 2.044 checking for ANSI C header files... yes
#20 2.291 checking for sys/types.h... yes
#20 2.346 checking for sys/stat.h... yes
#20 2.404 checking for stdlib.h... yes
#20 2.464 checking for string.h... yes
#20 2.528 checking for memory.h... yes
#20 2.593 checking for strings.h... yes
#20 2.656 checking for inttypes.h... yes
#20 2.723 checking for stdint.h... yes
#20 2.788 checking for unistd.h... yes
#20 2.862 checking for langinfo.h... yes
#20 2.938 checking for wchar.h... yes
#20 3.012 checking for sys/select.h... yes
#20 3.076 checking for cxxabi.h... yes
#20 3.149 checking for an ANSI C-conforming const... yes
#20 3.178 checking for inline... inline
#20 3.202 checking size of short... 2
#20 3.376 checking size of void *... 8
#20 3.546 checking size of int... 4
#20 3.713 checking size of long... 8
#20 3.886 checking size of size_t... 8
#20 4.074 checking size of long long... 8
#20 4.247 checking size of wchar_t... 4
#20 4.405 checking for va_copy... yes
#20 4.578 checking for _FILE_OFFSET_BITS value needed for large files... 64
#20 4.612 checking if large file support is available... yes
#20 4.613 checking for _LARGEFILE_SOURCE value needed for large files... no
#20 4.789 checking whether byte ordering is bigendian... no
#20 4.875 checking for std::wstring in <string>... yes
#20 5.694 checking for std::istream... yes
#20 7.839 checking for std::ostream... yes
#20 9.991 checking for type_traits... yes
#20 10.11 checking for __sync_fetch_and_add and __sync_sub_and_fetch builtins... yes
#20 10.27 checking for libraries directories... /usr/lib/x86_64-linux-gnu /usr/lib
#20 10.35 checking for cos... yes
#20 10.48 checking for floor... yes
#20 10.61 checking if floating point functions link without -lm... yes
#20 10.61 checking for strtoull... yes
#20 10.84 checking for pkg-config... no
#20 10.84 checking whether pcre submodule exists... no
#20 10.84 configure: error: 
#20 10.84     Configured to use built-in PCRE library, but the file
#20 10.84     ./3rdparty/pcre/pcre2-config.in couldn't be found.
#20 10.84     You might need to run:
#20 10.84 
#20 10.84         git submodule update --init 3rdparty/pcre
#20 10.84 
#20 10.84     to fix this.
#20 10.96 Traceback (most recent call last):
#20 10.96   File "<string>", line 1, in <module>
#20 10.96   File "/src/fuzzers/afl/fuzzer.py", line 40, in build
#20 10.96     utils.build_benchmark()
#20 10.96   File "/src/fuzzers/utils.py", line 82, in build_benchmark
#20 10.96     subprocess.check_call(['/bin/bash', '-ex', build_script], env=env)
#20 10.96   File "/usr/local/lib/python3.8/subprocess.py", line 364, in check_call
#20 10.96     raise CalledProcessError(retcode, cmd)
#20 10.96 subprocess.CalledProcessError: Command '['/bin/bash', '-ex', '/src/build.sh']' returned non-zero exit status 1.
#20 ERROR: executor failed running [/bin/sh -c echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi]: exit code: 1
------
 > importing cache manifest from gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets:
------
------
 > [stage-1 13/13] RUN echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi:
------
executor failed running [/bin/sh -c echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi]: exit code: 1
make: *** [docker/generated.mk:2839151: .afl-wxwidgets_wxwidgets-builder] Error 1
/bin/sh: 1: source: not found
#1 [internal] load build definition from Dockerfile
#1 sha256:4996cda96b340e45372c5a5477fb48d48c4ee93537b3e18a3b6ef37a7e7c45d5
#1 transferring dockerfile: 32B done
#1 DONE 0.1s

#2 [internal] load .dockerignore
#2 sha256:7bc2635de4014bcebd8fa26dca810b8cfdb418b382e77c77ba9aee083376b084
#2 transferring context: 2B done
#2 DONE 0.1s

#3 [internal] load metadata for gcr.io/oss-fuzz-base/base-builder:latest
#3 sha256:f10dc39cc9d418a5bc416dead31a1902b6821fdae909cd3b08f7a3fd1faba7b5
#3 DONE 0.5s

#5 [1/5] FROM gcr.io/oss-fuzz-base/base-builder@sha256:41d7bbe7827592680a606c9bba1aeb6e23c7502ce8b633923b06542f4c706e7c
#5 sha256:660db69324ed478291dd329cbbfe422dccbc173f9ab806c069fac341073eab8c
#5 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/builders/benchmark/wxwidgets_wxwidgets
#4 sha256:d95a21aff0d748c3a48ad27d16856aff82dc81f20da54ef36ae00d9727e4695e
#4 DONE 0.0s

#9 [internal] load build context
#9 sha256:a8a1c6b2b11effdd5e57110e67057bd494a4cae9225c1b53e590f8e2f6821f0d
#9 transferring context: 30B done
#9 DONE 0.1s

#6 [2/5] RUN apt-get update && apt-get install -y make
#6 sha256:9b70c01a26a944fca245ade6a846c8484655226a5a8b3698e60e5cc1ec1cf881
#6 CACHED

#7 [3/5] RUN git clone --depth 1 https://github.com/wxWidgets/wxWidgets.git wxwidgets
#7 sha256:60127b1f912d2b16216f2f6a608d2f15c5b447aa69d9c9827d4281170cd366a4
#7 CACHED

#8 [4/5] WORKDIR wxwidgets
#8 sha256:30cb0df1c61df6e9e6937a67dff036a401a6316d3e1698fe3d965c3ce505850d
#8 CACHED

#10 [5/5] COPY build.sh /src/
#10 sha256:c0cbb97d0e9774808f82133fb42b44d924c9ce0148ed101c972f5dda40b9f868
#10 CACHED

#11 exporting to image
#11 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#11 exporting layers done
#11 writing image sha256:47ef6a41740e5252b23313b026abbf6ceaf62c661483454d56df98314b959c8d done
#11 naming to gcr.io/fuzzbench/builders/benchmark/wxwidgets_wxwidgets done
#11 DONE 0.3s

#12 exporting cache
#12 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#12 preparing build cache for export done
#12 DONE 0.0s
#1 [internal] load build definition from builder.Dockerfile
#1 sha256:cb68e399d2798a3d8bd96319d8ed86b4e134fe1536179a08bacb0eb0d501e6e9
#1 transferring dockerfile: 46B done
#1 DONE 0.0s

#2 [internal] load .dockerignore
#2 sha256:ad81a0f1cf7e45d8013bfe22c7852d8267e7e1748181ceee8e7cb34ec180164e
#2 transferring context: 2B done
#2 DONE 0.1s

#3 [internal] load metadata for gcr.io/fuzzbench/builders/benchmark/wxwidgets_wxwidgets:latest
#3 sha256:b83337ad41cb4b944085281e7357efd1924a21b0515c1b5f36e2e5a4c0f2af8a
#3 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets-intermediate
#4 sha256:e4e287ea17737f3e0d7f0ded67325c004e94fcef2f8f8c8f50d673502e5eeaa0
#4 DONE 0.0s

#5 [1/3] FROM gcr.io/fuzzbench/builders/benchmark/wxwidgets_wxwidgets
#5 sha256:73917cda3e59fa8cf8bc783a0d1d9a723a89a25610b0df6706521a2f3cca5f41
#5 DONE 0.0s

#6 [2/3] RUN git clone https://github.com/google/AFL.git /afl &&     cd /afl &&     git checkout 61037103ae3722c8060ff7082994836a794f978e &&     AFL_NO_X86=1 make
#6 sha256:89224fb0186b104983ca632280a804633f3378afc41910d6307a9a4a9a589e3c
#6 CACHED

#7 [3/3] RUN apt-get update &&     apt-get install wget -y &&     wget https://raw.githubusercontent.com/llvm/llvm-project/5feb80e748924606531ba28c97fe65145c65372e/compiler-rt/lib/fuzzer/afl/afl_driver.cpp -O /afl/afl_driver.cpp &&     clang -Wno-pointer-sign -c /afl/llvm_mode/afl-llvm-rt.o.c -I/afl &&     clang++ -stdlib=libc++ -std=c++11 -O2 -c /afl/afl_driver.cpp &&     ar r /libAFL.a *.o
#7 sha256:484c92f712afde2360b549e0dc524333d8a604019160bafd7a3f72154167c1b4
#7 CACHED

#8 exporting to image
#8 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#8 exporting layers done
#8 writing image sha256:a65d2de7db5620f2aeb59a9e4cd03de72a25944be9d610e3edfe67c24cba239a done
#8 naming to gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets-intermediate done
#8 DONE 0.3s

#9 exporting cache
#9 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#9 preparing build cache for export done
#9 DONE 0.0s
#1 [internal] load build definition from Dockerfile
#1 sha256:95ffaf5d487a9c89be7ec1958542f1cdd066d14aa28a282e7316e6a3f137b2f1
#1 transferring dockerfile: 2.00kB done
#1 DONE 0.1s

#2 [internal] load .dockerignore
#2 sha256:248287b10094601d8b255995f6e4324d65cce839ce832ae4d7edcfe41961f700
#2 transferring context: 34B done
#2 DONE 0.1s

#3 [internal] load metadata for docker.io/library/ubuntu:xenial
#3 sha256:f62bae18ed588840f045c881b2502661f2a89578a2f8f99b83f5200ee83dd25b
#3 DONE 0.0s

#5 [1/7] FROM docker.io/library/ubuntu:xenial
#5 sha256:14dd403f25ae9e519bd44f27dc17af7ce80f5a4f9f48ca88108364e67ec5d360
#5 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/base-image
#4 sha256:9b220ebb4d4daceed1b96df9b6dca076e762f1cd612574f010b82d5b9e5ad896
#4 DONE 0.0s

#8 [internal] load build context
#8 sha256:415c1b0f71701608f89ef6b80942381009e31f35fec15ae58fbc0e84aba1679f
#8 transferring context: 559B 0.0s done
#8 DONE 0.1s

#6 [2/7] RUN apt-get update -y && apt-get install -y     build-essential     rsync     curl     zlib1g-dev     libncurses5-dev     libgdbm-dev     libnss3-dev     libssl-dev     libreadline-dev     libffi-dev     virtualenv     libbz2-dev     liblzma-dev     libsqlite3-dev
#6 sha256:3a1b0960f17eed529eaae93dc8fd3554f2743dd584d8fa569cdbe6bc734371ac
#6 CACHED

#7 [3/7] RUN cd /tmp/ &&     curl -O https://www.python.org/ftp/python/3.8.6/Python-3.8.6.tar.xz &&     tar -xvf Python-3.8.6.tar.xz &&     cd Python-3.8.6 &&     ./configure --enable-loadable-sqlite-extensions --enable-optimizations &&     make -j install &&     rm -r /tmp/Python-3.8.6.tar.xz /tmp/Python-3.8.6
#7 sha256:c5b9d1fb3371e84dbc60b76e7b2f8d5913bc93bcd4910ab65daa03e7b2ec4bb0
#7 CACHED

#9 [4/7] COPY ./requirements.txt /
#9 sha256:18ab9eed80253120607abf5c4c60f9a2a67ef9c1dc0910070dced2c910548840
#9 CACHED

#10 [5/7] RUN pip3 install -r /requirements.txt
#10 sha256:2e634208909959ba1b9612c558186adce7bb1692014e9e79067a8199dcf77199
#10 CACHED

#11 [6/7] RUN apt-get update -y && apt-get install -y     apt-transport-https     lsb-release
#11 sha256:57257400c9865628d42a6e636488201461d5741ebb2c705b68f2102e28bd3314
#11 CACHED

#12 [7/7] RUN CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" &&     echo "deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main"     | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list &&     curl https://packages.cloud.google.com/apt/doc/apt-key.gpg     | apt-key add - &&     apt-get update -y &&     apt-get install -y google-cloud-sdk
#12 sha256:20ed460638f3a3b31b0081211f046a0d0901405d62cdafbea6af2f982681c51a
#12 CACHED

#13 exporting to image
#13 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#13 exporting layers done
#13 writing image sha256:4194ef1d23fc015b139743048663e651b15a8f2752b53c16e7b7e39247b68536 done
#13 naming to gcr.io/fuzzbench/base-image done
#13 DONE 0.0s

#14 exporting cache
#14 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#14 preparing build cache for export done
#14 DONE 0.0s
#1 [internal] load build definition from Dockerfile
#1 sha256:95df61c4ca1d83c050fd705b56f1a66d5936bc2b82c8a22e76a8ea7cd1bfddab
#1 transferring dockerfile: 2.22kB done
#1 DONE 0.0s

#2 [internal] load .dockerignore
#2 sha256:3dfa1a209e8b73f6d55fdaea2e1f2c7bbf0551b56264952854f7be8cd32a19fa
#2 transferring context: 34B done
#2 DONE 0.0s

#4 [internal] load metadata for gcr.io/fuzzbench/base-image:latest
#4 sha256:932022888f650cc455b10eb5123bb08c0cccacac29a693e69314abbfd28a72c3
#4 DONE 0.0s

#3 [internal] load metadata for gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets-intermediate:latest
#3 sha256:321580099111fa37157eaaa5e68f15f61c1b237c57325ac0024e32498bd7fb48
#3 DONE 0.0s

#12 [internal] load build context
#12 sha256:102802e50f1666e7f6752379548e9587a68f67aef0c44434fccb4b4afe250168
#12 DONE 0.0s

#7 [base-image 1/1] FROM gcr.io/fuzzbench/base-image
#7 sha256:4d07825694520f8b6f6a0d8592dbd345433361ae044cb7f06706c5a95e3daaad
#7 DONE 0.0s

#6 [stage-1  1/13] FROM gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets-intermediate
#6 sha256:a300fe06f4e13e3b52dc6c380d8e8d50e2ccf8861a582296ce82e53d998e08e4
#6 DONE 0.0s

#5 importing cache manifest from gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets
#5 sha256:19688c949cd0adac8c63469c17692175f822498c447d97be1e1cf112b4dd4334
#5 ERROR: gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets:latest: not found

#12 [internal] load build context
#12 sha256:102802e50f1666e7f6752379548e9587a68f67aef0c44434fccb4b4afe250168
#12 transferring context: 669.88kB 0.1s done
#12 DONE 0.1s

#17 [stage-1 10/13] COPY docker/benchmark-builder/checkout_commit.py /opt/fuzzbench/
#17 sha256:90a910e415ee735a21ec4518fb4c744bd8246c697f0f4449479bd771c54cf1f0
#17 CACHED

#11 [stage-1  5/13] COPY --from=base-image /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
#11 sha256:406d186d7292b0fc47000968df942f4cc2dc017c7d5e6be636bb53266040e956
#11 CACHED

#13 [stage-1  6/13] COPY fuzzers /src/fuzzers
#13 sha256:bb151faa727f92e03ea3376fd53475f022bcbe9eeefc5e15741b1cd062162d2a
#13 CACHED

#15 [stage-1  8/13] COPY benchmarks/wxwidgets_wxwidgets/benchmark.yaml /
#15 sha256:10a9c215ca040e08aa1206320d4fd2ce44dcf086849f6d511cd235457f7f4616
#15 CACHED

#8 [stage-1  2/13] COPY --from=base-image /usr/local/bin/python3* /usr/local/bin/
#8 sha256:1f838b4af93acda4195ea70e55d26fba7f7e7f86806080dfba63d3d85aa105aa
#8 CACHED

#14 [stage-1  7/13] RUN touch /src/__init__.py
#14 sha256:48d68a6ef8f7ba9680680497fd1469b7faeadbceb5c4484e8a3d4f4f7b564362
#14 CACHED

#16 [stage-1  9/13] RUN mkdir /opt/fuzzbench/
#16 sha256:d03cd2779b7cbe6945fc99ea119d8ed69433d98d2c0672e7b6eda1bd5a0a36e6
#16 CACHED

#18 [stage-1 11/13] RUN export CHECKOUT_COMMIT=$(cat /benchmark.yaml | tr -d ' ' | grep 'commit:' | cut -d ':' -f2) &&     python3 -u /opt/fuzzbench/checkout_commit.py $CHECKOUT_COMMIT /src
#18 sha256:89120c9b7337b8949190c357a6b2a4c1913c7c46bb55298afeb32dda9147867f
#18 CACHED

#9 [stage-1  3/13] COPY --from=base-image /usr/local/lib/python3.8 /usr/local/lib/python3.8
#9 sha256:5dbb85e4a936f369672c6da6725a7a7b61302db1f8861c3cc8c1453a59d8c2dc
#9 CACHED

#10 [stage-1  4/13] COPY --from=base-image /usr/local/include/python3.8 /usr/local/include/python3.8
#10 sha256:df4582014b4bbbc50b4078dcff42e7c01b1ed52c19b44707900d4dc2c6e3de73
#10 CACHED

#19 [stage-1 12/13] RUN echo "#!/bin/bash\nPYTHONPATH=/src python3 -u -c "from fuzzers import utils; utils.initialize_env(); from fuzzers.afl import fuzzer; fuzzer.build()"" > /usr/bin/fuzzer_build &&     chmod +x /usr/bin/fuzzer_build
#19 sha256:2a078c3f412a0871fc9b9a51e2b678aa2a0fc0ac8d367c408e41d5997b3e7644
#19 CACHED

#20 [stage-1 13/13] RUN echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi
#20 sha256:67f28b259c42c43bbae7d8bf12cb238002153660664c923c64fbbe6061c08796
#20 0.366 Run fuzzer_build to build the target
#20 0.480 FUZZ_TARGET = wxwidgets
#20 0.480 CFLAGS = -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument -O3
#20 0.480 CXXFLAGS = -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument -stdlib=libc++ -O3
#20 0.485 Building benchmark wxwidgets_wxwidgets with fuzzer afl
#20 0.488 + ./configure --without-subdirs --disable-sys-libs --disable-gui
#20 0.741 checking build system type... x86_64-pc-linux-gnu
#20 0.812 checking host system type... x86_64-pc-linux-gnu
#20 0.908 checking for gcc... clang
#20 0.980 checking whether the C compiler works... yes
#20 1.107 checking for C compiler default output file name... a.out
#20 1.109 checking for suffix of executables... 
#20 1.235 checking whether we are cross compiling... no
#20 1.367 checking for suffix of object files... o
#20 1.398 checking whether we are using the GNU C compiler... yes
#20 1.426 checking whether clang accepts -g... yes
#20 1.452 checking for clang option to accept ISO C89... none needed
#20 1.497 checking whether we are using the Intel C compiler... no
#20 1.528 checking how to run the C preprocessor... clang -E
#20 1.622 checking for grep that handles long lines and -e... /usr/bin/grep
#20 1.627 checking for egrep... /usr/bin/grep -E
#20 1.630 checking whether clang needs -traditional... no
#20 1.737 checking whether we are using the GNU C++ compiler... yes
#20 1.765 checking whether clang++ accepts -g... yes
#20 1.787 checking whether we are using the Intel C++ compiler... no
#20 1.823 checking whether we are using the Sun C++ compiler... no
#20 1.857 checking for ar... ar
#20 1.862 checking for ANSI C header files... yes
#20 2.112 checking for sys/types.h... yes
#20 2.169 checking for sys/stat.h... yes
#20 2.231 checking for stdlib.h... yes
#20 2.291 checking for string.h... yes
#20 2.354 checking for memory.h... yes
#20 2.418 checking for strings.h... yes
#20 2.482 checking for inttypes.h... yes
#20 2.548 checking for stdint.h... yes
#20 2.615 checking for unistd.h... yes
#20 2.687 checking for langinfo.h... yes
#20 2.761 checking for wchar.h... yes
#20 2.839 checking for sys/select.h... yes
#20 2.901 checking for cxxabi.h... yes
#20 2.981 checking for an ANSI C-conforming const... yes
#20 3.010 checking for inline... inline
#20 3.035 checking size of short... 2
#20 3.207 checking size of void *... 8
#20 3.371 checking size of int... 4
#20 3.557 checking size of long... 8
#20 3.731 checking size of size_t... 8
#20 3.910 checking size of long long... 8
#20 4.081 checking size of wchar_t... 4
#20 4.241 checking for va_copy... yes
#20 4.409 checking for _FILE_OFFSET_BITS value needed for large files... 64
#20 4.444 checking if large file support is available... yes
#20 4.445 checking for _LARGEFILE_SOURCE value needed for large files... no
#20 4.614 checking whether byte ordering is bigendian... no
#20 4.705 checking for std::wstring in <string>... yes
#20 5.521 checking for std::istream... yes
#20 7.671 checking for std::ostream... yes
#20 9.860 checking for type_traits... yes
#20 9.981 checking for __sync_fetch_and_add and __sync_sub_and_fetch builtins... yes
#20 10.14 checking for libraries directories... /usr/lib/x86_64-linux-gnu /usr/lib
#20 10.21 checking for cos... yes
#20 10.35 checking for floor... yes
#20 10.48 checking if floating point functions link without -lm... yes
#20 10.48 checking for strtoull... yes
#20 10.70 checking for pkg-config... no
#20 10.71 checking whether pcre submodule exists... no
#20 10.71 configure: error: 
#20 10.71     Configured to use built-in PCRE library, but the file
#20 10.71     ./3rdparty/pcre/pcre2-config.in couldn't be found.
#20 10.71     You might need to run:
#20 10.71 
#20 10.71         git submodule update --init 3rdparty/pcre
#20 10.71 
#20 10.71     to fix this.
#20 10.82 Traceback (most recent call last):
#20 10.82   File "<string>", line 1, in <module>
#20 10.82   File "/src/fuzzers/afl/fuzzer.py", line 40, in build
#20 10.82     utils.build_benchmark()
#20 10.82   File "/src/fuzzers/utils.py", line 82, in build_benchmark
#20 10.82     subprocess.check_call(['/bin/bash', '-ex', build_script], env=env)
#20 10.82   File "/usr/local/lib/python3.8/subprocess.py", line 364, in check_call
#20 10.82     raise CalledProcessError(retcode, cmd)
#20 10.82 subprocess.CalledProcessError: Command '['/bin/bash', '-ex', '/src/build.sh']' returned non-zero exit status 1.
#20 ERROR: executor failed running [/bin/sh -c echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi]: exit code: 1
------
 > importing cache manifest from gcr.io/fuzzbench/builders/afl/wxwidgets_wxwidgets:
------
------
 > [stage-1 13/13] RUN echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi:
------
executor failed running [/bin/sh -c echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi]: exit code: 1
make: *** [docker/generated.mk:2839151: .afl-wxwidgets_wxwidgets-builder] Error 1
