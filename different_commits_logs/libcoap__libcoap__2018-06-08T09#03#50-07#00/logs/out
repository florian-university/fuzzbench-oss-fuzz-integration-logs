WARNING:root:gcloud not found in PATH.
INFO:root:Successfully integrated benchmark: libcoap_libcoap.
INFO:root:Please run "make test-run-afl-libcoap_libcoap" to test integration.
#1 [internal] load build definition from Dockerfile
#1 sha256:3693ae8240c70039466a1000ffbe711c0d2822517433e1fbb753ebec3256560e
#1 transferring dockerfile:
#1 transferring dockerfile: 970B done
#1 DONE 1.0s

#2 [internal] load .dockerignore
#2 sha256:f9b357311d08dd87bdc62aac3ae378770e3c52f2665170bb4fa5fa20ed1dea12
#2 transferring context: 2B done
#2 DONE 1.2s

#3 [internal] load metadata for gcr.io/oss-fuzz-base/base-builder:latest
#3 sha256:f10dc39cc9d418a5bc416dead31a1902b6821fdae909cd3b08f7a3fd1faba7b5
#3 DONE 0.9s

#9 [internal] load build context
#9 sha256:e3e0480bf631cc6dff948d6160294019ea4ead349739f86b36e446711e7e128e
#9 DONE 0.0s

#5 [1/5] FROM gcr.io/oss-fuzz-base/base-builder@sha256:41d7bbe7827592680a606c9bba1aeb6e23c7502ce8b633923b06542f4c706e7c
#5 sha256:660db69324ed478291dd329cbbfe422dccbc173f9ab806c069fac341073eab8c
#5 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/builders/benchmark/libcoap_libcoap
#4 sha256:5e75753f93ff8db33014dbd0aec29d403fa6039611fef397ee4f33c3e697d965
#4 ERROR: gcr.io/fuzzbench/builders/benchmark/libcoap_libcoap:latest: not found

#9 [internal] load build context
#9 sha256:e3e0480bf631cc6dff948d6160294019ea4ead349739f86b36e446711e7e128e
#9 ...

#6 [2/5] RUN apt-get update && apt-get install -y make autoconf automake libtool     pkg-config
#6 sha256:5957c15ea336e23163a53d9a7d223df93727b6605daf7ffa1f89b698ccaa12ce
#6 CACHED

#7 [3/5] RUN git clone --depth 1 https://github.com/obgm/libcoap.git libcoap
#7 sha256:a480433fe3d0880f9edbb4289088e3750b84f675b89ff49676e912978ae81eca
#7 CACHED

#8 [4/5] WORKDIR libcoap
#8 sha256:71ad700559604b0b014766cbd3e9a5cdd51b2a2e451b805735ddecf637d80670
#8 CACHED

#9 [internal] load build context
#9 sha256:e3e0480bf631cc6dff948d6160294019ea4ead349739f86b36e446711e7e128e
#9 transferring context: 2.03kB done
#9 DONE 0.6s

#10 [5/5] COPY build.sh *_target.c /src/
#10 sha256:8697ed0bebb142f7d3ea17b9fe0870eaf8e4e109be32ba819b70a05d037cbe99
#10 DONE 3.0s

#11 exporting to image
#11 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#11 exporting layers done
#11 writing image sha256:5f41d015c85380fefe0e52739df9f7edfe5934eea9dba6a1ce3ffe6334c8d74d 0.0s done
#11 naming to gcr.io/fuzzbench/builders/benchmark/libcoap_libcoap 0.0s done
#11 DONE 0.3s

#12 exporting cache
#12 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#12 preparing build cache for export done
#12 DONE 0.0s
------
 > importing cache manifest from gcr.io/fuzzbench/builders/benchmark/libcoap_libcoap:
------
#1 [internal] load build definition from builder.Dockerfile
#1 sha256:1d221a8aa2f7ef6a76e95bf86b71dcae383bb85c8ac24fdbe1a4fe23d64ce3f9
#1 transferring dockerfile: 1.35kB done
#1 DONE 0.1s

#2 [internal] load .dockerignore
#2 sha256:062b0ada37693fe97184a3da3d9d97f45ff28e8f2f51dcf91eddb815e1f091a7
#2 transferring context: 2B done
#2 DONE 0.1s

#3 [internal] load metadata for gcr.io/fuzzbench/builders/benchmark/libcoap_libcoap:latest
#3 sha256:f0a4a40bdc7ad5f3041f8e3800a4c8e0edf3e896fe9f9c03b18860010b6f5c7b
#3 DONE 0.0s

#5 [1/3] FROM gcr.io/fuzzbench/builders/benchmark/libcoap_libcoap
#5 sha256:4cf9839dfd59add16745f804cfe5fbdd568b9793b927f1b73d04fd2fc6fb54e8
#5 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/builders/afl/libcoap_libcoap-intermediate
#4 sha256:b4b38bb8d46d630c9205058e12d86f18ba302f148051749aab15f8dd8fdbc29d
#4 ERROR: gcr.io/fuzzbench/builders/afl/libcoap_libcoap-intermediate:latest: not found

#5 [1/3] FROM gcr.io/fuzzbench/builders/benchmark/libcoap_libcoap
#5 sha256:4cf9839dfd59add16745f804cfe5fbdd568b9793b927f1b73d04fd2fc6fb54e8
#5 DONE 0.6s

#6 [2/3] RUN git clone https://github.com/google/AFL.git /afl &&     cd /afl &&     git checkout 61037103ae3722c8060ff7082994836a794f978e &&     AFL_NO_X86=1 make
#6 sha256:9b82135892ba69945294bcbecb56d8206a6b5e3575a6cdcb35386419f7b50d0e
#6 0.504 Cloning into '/afl'...
#6 1.266 Note: switching to '61037103ae3722c8060ff7082994836a794f978e'.
#6 1.266 
#6 1.266 You are in 'detached HEAD' state. You can look around, make experimental
#6 1.266 changes and commit them, and you can discard any commits you make in this
#6 1.266 state without impacting any branches by switching back to a branch.
#6 1.266 
#6 1.266 If you want to create a new branch to retain commits you create, you may
#6 1.266 do so (now or later) by using -c with the switch command. Example:
#6 1.266 
#6 1.266   git switch -c <new-branch-name>
#6 1.266 
#6 1.266 Or undo this operation with:
#6 1.266 
#6 1.266   git switch -
#6 1.266 
#6 1.266 Turn off this advice by setting config variable advice.detachedHead to false
#6 1.266 
#6 1.266 HEAD is now at 6103710 Fix a typo filename comparison in the fuzzer (#139)
#6 1.281 [!] Note: skipping x86 compilation checks (AFL_NO_X86 set).
#6 1.281 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-gcc.c -o afl-gcc -ldl
#6 1.457 set -e; for i in afl-g++ afl-clang afl-clang++; do ln -sf afl-gcc $i; done
#6 1.462 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-fuzz.c -o afl-fuzz -ldl
#6 3.887 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-showmap.c -o afl-showmap -ldl
#6 4.215 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-tmin.c -o afl-tmin -ldl
#6 4.661 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-gotcpu.c -o afl-gotcpu -ldl
#6 4.809 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-analyze.c -o afl-analyze -ldl
#6 5.207 clang -O1 -fno-omit-frame-pointer -gline-tables-only -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -Wall -D_FORTIFY_SOURCE=2 -g -Wno-pointer-sign -DAFL_PATH=\"/usr/local/lib/afl\" -DDOC_PATH=\"/usr/local/share/doc/afl\" -DBIN_PATH=\"/usr/local/bin\" afl-as.c -o afl-as -ldl
#6 5.448 ln -sf afl-as as
#6 5.450 [!] Note: skipping build tests (you may need to use LLVM or QEMU mode).
#6 5.453 [+] LLVM users: see llvm_mode/README.llvm for a faster alternative to afl-gcc.
#6 5.454 [+] All done! Be sure to review README - it's pretty short and useful.
#6 DONE 6.0s

#7 [3/3] RUN apt-get update &&     apt-get install wget -y &&     wget https://raw.githubusercontent.com/llvm/llvm-project/5feb80e748924606531ba28c97fe65145c65372e/compiler-rt/lib/fuzzer/afl/afl_driver.cpp -O /afl/afl_driver.cpp &&     clang -Wno-pointer-sign -c /afl/llvm_mode/afl-llvm-rt.o.c -I/afl &&     clang++ -stdlib=libc++ -std=c++11 -O2 -c /afl/afl_driver.cpp &&     ar r /libAFL.a *.o
#7 sha256:6eda95f373fabb4a9c8bc9c95b39d476fa1602db0942f67726161818a12641b8
#7 0.768 Hit:1 http://archive.ubuntu.com/ubuntu focal InRelease
#7 0.768 Get:2 http://archive.ubuntu.com/ubuntu focal-updates InRelease [114 kB]
#7 0.768 Hit:3 http://ppa.launchpad.net/git-core/ppa/ubuntu focal InRelease
#7 0.848 Get:4 http://archive.ubuntu.com/ubuntu focal-backports InRelease [108 kB]
#7 0.873 Get:5 http://security.ubuntu.com/ubuntu focal-security InRelease [114 kB]
#7 1.629 Fetched 336 kB in 1s (345 kB/s)
#7 1.629 Reading package lists...
#7 3.124 Reading package lists...
#7 4.541 Building dependency tree...
#7 4.751 Reading state information...
#7 4.996 wget is already the newest version (1.20.3-1ubuntu2).
#7 4.996 0 upgraded, 0 newly installed, 0 to remove and 1 not upgraded.
#7 5.001 --2022-02-17 12:59:41--  https://raw.githubusercontent.com/llvm/llvm-project/5feb80e748924606531ba28c97fe65145c65372e/compiler-rt/lib/fuzzer/afl/afl_driver.cpp
#7 5.004 Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.109.133, 185.199.111.133, 185.199.108.133, ...
#7 5.006 Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.109.133|:443... connected.
#7 5.029 HTTP request sent, awaiting response... 200 OK
#7 5.202 Length: 9177 (9.0K) [text/plain]
#7 5.202 Saving to: '/afl/afl_driver.cpp'
#7 5.202 
#7 5.202      0K ........                                              100% 11.6M=0.001s
#7 5.203 
#7 5.203 2022-02-17 12:59:41 (11.6 MB/s) - '/afl/afl_driver.cpp' saved [9177/9177]
#7 5.203 
#7 7.577 ar: creating /libAFL.a
#7 DONE 8.6s

#8 exporting to image
#8 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#8 exporting layers done
#8 writing image sha256:67354019bff3bc00747aeb3d6690ff97f7ea8c2be3899cf6d8664d00ed3e71cd 0.0s done
#8 naming to gcr.io/fuzzbench/builders/afl/libcoap_libcoap-intermediate done
#8 DONE 0.3s

#9 exporting cache
#9 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#9 preparing build cache for export done
#9 DONE 0.0s
------
 > importing cache manifest from gcr.io/fuzzbench/builders/afl/libcoap_libcoap-intermediate:
------
#2 [internal] load .dockerignore
#2 sha256:6c5d92ccdafc96bed1e4b0b90b0638a932e88cce462d377dd2e9a1b36c52a695
#2 transferring context: 34B done
#2 DONE 0.1s

#1 [internal] load build definition from Dockerfile
#1 sha256:35df5018f77e70a5fb2d9c9dcebc6be35b225086bb6c474500e544b387bdf923
#1 transferring dockerfile: 2.00kB done
#1 DONE 0.2s

#3 [internal] load metadata for docker.io/library/ubuntu:xenial
#3 sha256:f62bae18ed588840f045c881b2502661f2a89578a2f8f99b83f5200ee83dd25b
#3 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/base-image
#4 sha256:9b220ebb4d4daceed1b96df9b6dca076e762f1cd612574f010b82d5b9e5ad896
#4 DONE 0.0s

#5 [1/7] FROM docker.io/library/ubuntu:xenial
#5 sha256:14dd403f25ae9e519bd44f27dc17af7ce80f5a4f9f48ca88108364e67ec5d360
#5 DONE 0.0s

#8 [internal] load build context
#8 sha256:1f444d48e2b4035ceef1d5b1f113b66deb89192a044db09bd68e347918dc4363
#8 transferring context: 559B 0.2s done
#8 DONE 0.3s

#11 [6/7] RUN apt-get update -y && apt-get install -y     apt-transport-https     lsb-release
#11 sha256:c5d69b89941cd3b79988dbe7c2cb1e8df921f64f2cb1e150e78b7174465f8610
#11 CACHED

#6 [2/7] RUN apt-get update -y && apt-get install -y     build-essential     rsync     curl     zlib1g-dev     libncurses5-dev     libgdbm-dev     libnss3-dev     libssl-dev     libreadline-dev     libffi-dev     virtualenv     libbz2-dev     liblzma-dev     libsqlite3-dev
#6 sha256:3a1b0960f17eed529eaae93dc8fd3554f2743dd584d8fa569cdbe6bc734371ac
#6 CACHED

#7 [3/7] RUN cd /tmp/ &&     curl -O https://www.python.org/ftp/python/3.8.6/Python-3.8.6.tar.xz &&     tar -xvf Python-3.8.6.tar.xz &&     cd Python-3.8.6 &&     ./configure --enable-loadable-sqlite-extensions --enable-optimizations &&     make -j install &&     rm -r /tmp/Python-3.8.6.tar.xz /tmp/Python-3.8.6
#7 sha256:c5b9d1fb3371e84dbc60b76e7b2f8d5913bc93bcd4910ab65daa03e7b2ec4bb0
#7 CACHED

#9 [4/7] COPY ./requirements.txt /
#9 sha256:783083ab6205c1af9ba812195881f80eed5f0b4c712c9b956c3a95043e0b0a59
#9 CACHED

#10 [5/7] RUN pip3 install -r /requirements.txt
#10 sha256:a135e06dbc35094d4fae7cbc00bed78ef000bede2f16b43b700628e307798875
#10 CACHED

#12 [7/7] RUN CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" &&     echo "deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main"     | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list &&     curl https://packages.cloud.google.com/apt/doc/apt-key.gpg     | apt-key add - &&     apt-get update -y &&     apt-get install -y google-cloud-sdk
#12 sha256:9ea8870dbafd1d6275112799ec3bf6263d6d26327eac1ef377d8692cf4a72059
#12 CACHED

#13 exporting to image
#13 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#13 exporting layers done
#13 writing image sha256:7d9957eb6f280da9248cb8afce2961dbcb27e41d89cdfd8167167cb748135959 0.0s done
#13 naming to gcr.io/fuzzbench/base-image done
#13 DONE 0.2s

#14 exporting cache
#14 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#14 preparing build cache for export done
#14 DONE 0.0s
#1 [internal] load build definition from Dockerfile
#1 sha256:e862020e7c155a26c07863b0614a898ae6e0c93d8914e46ffaf57ad61190a98a
#1 transferring dockerfile: 2.22kB done
#1 DONE 0.1s

#2 [internal] load .dockerignore
#2 sha256:b563c11ad8b8ac47c43504e23b6a7cc3cffd4e59f11a4c980bbabd214317e819
#2 transferring context: 34B done
#2 DONE 0.1s

#4 [internal] load metadata for gcr.io/fuzzbench/base-image:latest
#4 sha256:932022888f650cc455b10eb5123bb08c0cccacac29a693e69314abbfd28a72c3
#4 DONE 0.0s

#3 [internal] load metadata for gcr.io/fuzzbench/builders/afl/libcoap_libcoap-intermediate:latest
#3 sha256:6ef438917449281df559796ed243d0351a1c533a4801f5995b07b989e04f0e7c
#3 DONE 0.0s

#12 [internal] load build context
#12 sha256:371eaaf047fe386b520408b8d4358de88b58260028f70fa0fe097db614ea8a06
#12 DONE 0.0s

#7 [base-image 1/1] FROM gcr.io/fuzzbench/base-image
#7 sha256:4d07825694520f8b6f6a0d8592dbd345433361ae044cb7f06706c5a95e3daaad
#7 DONE 0.0s

#6 [stage-1  1/13] FROM gcr.io/fuzzbench/builders/afl/libcoap_libcoap-intermediate
#6 sha256:af71f9dc5ff013ae780c772b210eff8b0027db7277041b4f2f7b88611fb54e27
#6 DONE 0.0s

#5 importing cache manifest from gcr.io/fuzzbench/builders/afl/libcoap_libcoap
#5 sha256:a60b6769d548e5569b5b114c9e7ecefb82b4bf2ebb40e3f464c1c64d9bec9d02
#5 ERROR: gcr.io/fuzzbench/builders/afl/libcoap_libcoap:latest: not found

#7 [base-image 1/1] FROM gcr.io/fuzzbench/base-image
#7 sha256:4d07825694520f8b6f6a0d8592dbd345433361ae044cb7f06706c5a95e3daaad
#7 CACHED

#12 [internal] load build context
#12 sha256:371eaaf047fe386b520408b8d4358de88b58260028f70fa0fe097db614ea8a06
#12 transferring context: 669.87kB 0.1s done
#12 DONE 0.2s

#6 [stage-1  1/13] FROM gcr.io/fuzzbench/builders/afl/libcoap_libcoap-intermediate
#6 sha256:af71f9dc5ff013ae780c772b210eff8b0027db7277041b4f2f7b88611fb54e27
#6 DONE 1.1s

#8 [stage-1  2/13] COPY --from=base-image /usr/local/bin/python3* /usr/local/bin/
#8 sha256:3f22becf8e381308d528b9c485c2ba4598189d0a7fae1ca41895d47d3c5285e3
#8 DONE 1.0s

#9 [stage-1  3/13] COPY --from=base-image /usr/local/lib/python3.8 /usr/local/lib/python3.8
#9 sha256:93b4e719d4793f2c72542d9d5cc02e060c91437b0345d3a137dd6f73ad24edc6
#9 DONE 34.0s

#10 [stage-1  4/13] COPY --from=base-image /usr/local/include/python3.8 /usr/local/include/python3.8
#10 sha256:840c65a50aa08f63d105cf9eff04d95778e3dbcaca2c4a1e07cff0e80805f6ee
#10 DONE 0.4s

#11 [stage-1  5/13] COPY --from=base-image /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
#11 sha256:310314d9daea97a6a18b9e38417954a249cbbc2a3ba44fe2e5cf011449ef1b63
#11 DONE 36.3s

#13 [stage-1  6/13] COPY fuzzers /src/fuzzers
#13 sha256:961194b40ed92495a2834f968b9b0d37d34db12e35599396c8942614d0be6e35
#13 DONE 1.6s

#14 [stage-1  7/13] RUN touch /src/__init__.py
#14 sha256:dabbf741e900307f13b7c77d62bab3f5cdd2ff94d32188235b6658f7fc74e35e
#14 DONE 2.6s

#15 [stage-1  8/13] COPY benchmarks/libcoap_libcoap/benchmark.yaml /
#15 sha256:fb49632f01845617b7ae993b7888193e9f11b814a0c11b33acc8d5c2fd70717b
#15 DONE 0.4s

#16 [stage-1  9/13] RUN mkdir /opt/fuzzbench/
#16 sha256:4a99a9dcd03f9602c04cb3af32bdf20d1609aac35648f92bb061c16acb055ba6
#16 DONE 0.8s

#17 [stage-1 10/13] COPY docker/benchmark-builder/checkout_commit.py /opt/fuzzbench/
#17 sha256:58c89cb1b26ffbab1fda42157954d39ddf7bd83ee471b5b35776f09903a2d36e
#17 DONE 0.3s

#18 [stage-1 11/13] RUN export CHECKOUT_COMMIT=$(cat /benchmark.yaml | tr -d ' ' | grep 'commit:' | cut -d ':' -f2) &&     python3 -u /opt/fuzzbench/checkout_commit.py $CHECKOUT_COMMIT /src
#18 sha256:097080f2190873296a22672928a10850e31cab1f71247d45f2e06f4b9debff98
#18 0.501 Checking out commit d2c9d6fe
#18 6.113 From https://github.com/obgm/libcoap
#18 6.113  * [new tag]         bsd-licensed  -> bsd-licensed
#18 6.113  * [new tag]         coap-lwip     -> coap-lwip
#18 6.113  * [new tag]         coap-tinydtls -> coap-tinydtls
#18 6.114  * [new tag]         v4.1.1        -> v4.1.1
#18 6.114  * [new tag]         v4.1.2        -> v4.1.2
#18 6.114  * [new tag]         v4.2.0        -> v4.2.0
#18 6.114  * [new tag]         v4.2.0-rc1    -> v4.2.0-rc1
#18 6.115  * [new tag]         v4.2.0-rc2    -> v4.2.0-rc2
#18 6.115  * [new tag]         v4.2.0-rc3    -> v4.2.0-rc3
#18 6.115  * [new tag]         v4.2.0-rc4    -> v4.2.0-rc4
#18 6.115  * [new tag]         v4.2.1        -> v4.2.1
#18 6.115  * [new tag]         v4.3.0        -> v4.3.0
#18 6.116  * [new tag]         v4.3.0-rc1    -> v4.3.0-rc1
#18 6.116  * [new tag]         v4.3.0-rc2    -> v4.3.0-rc2
#18 6.116  * [new tag]         v4.3.0-rc3    -> v4.3.0-rc3
#18 6.116  * [new tag]         v4.3.0-rc4    -> v4.3.0-rc4
#18 6.117  * [new tag]         v4_1_1        -> v4_1_1
#18 6.253 error: pathspec 'd2c9d6fe' did not match any file(s) known to git
#18 6.257 error: pathspec 'd2c9d6fe' did not match any file(s) known to git
#18 6.265 error: pathspec 'd2c9d6fe' did not match any file(s) known to git
#18 6.306 Checkout unsuccessful.
#18 DONE 8.4s

#19 [stage-1 12/13] RUN echo "#!/bin/bash\nPYTHONPATH=/src python3 -u -c "from fuzzers import utils; utils.initialize_env(); from fuzzers.afl import fuzzer; fuzzer.build()"" > /usr/bin/fuzzer_build &&     chmod +x /usr/bin/fuzzer_build
#19 sha256:c5dabc46e3b2b1f5b6bbbeab40f7e57ec050918bfe3f5e9400a94abc9cd8a71d
#19 DONE 1.1s

#20 [stage-1 13/13] RUN echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi
#20 sha256:0e754b74e08eff0aa69710aa10c5095b323f3bb7a159e44f16e62da149526311
#20 1.039 Run fuzzer_build to build the target
#20 1.175 FUZZ_TARGET = libcoap
#20 1.175 CFLAGS = -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument -O3
#20 1.175 CXXFLAGS = -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument -stdlib=libc++ -O3
#20 1.180 Building benchmark libcoap_libcoap with fuzzer afl
#20 1.183 + ./autogen.sh
#20 1.184 
#20 1.184 [HINT] You can run 'autogen.sh --clean' to remove all generated files by the autotools.
#20 1.184 
#20 1.186 Found 'autoconf'.
#20 1.187 Found 'aclocal'.
#20 1.189 Found 'pkg-config'.
#20 1.190 
#20 1.190 Couldn't find 'libtool'!
#20 1.192 Found 'libtoolize'.
#20 1.192 
#20 1.192   --->  Found all needed tools! That's fine.
#20 1.192 
#20 1.195 Generating needed autotools files for libcoap by running autoreconf ...
#20 1.553 autoreconf: Entering directory `.'
#20 1.558 autoreconf: configure.ac: not using Gettext
#20 2.558 autoreconf: running: aclocal --force ${ACLOCAL_FLAGS} -I m4
#20 4.812 autoreconf: configure.ac: tracing
#20 5.721 autoreconf: configure.ac: adding subdirectory ext/tinydtls to autoreconf
#20 5.723 autoreconf: Entering directory `ext/tinydtls'
#20 5.723 autoreconf: configure.ac: not using Autoconf
#20 5.723 autoreconf: Leaving directory `ext/tinydtls'
#20 5.723 autoreconf: running: libtoolize --copy --force
#20 6.048 libtoolize: putting auxiliary files in '.'.
#20 6.048 libtoolize: copying file './ltmain.sh'
#20 6.094 libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
#20 6.094 libtoolize: copying file 'm4/libtool.m4'
#20 6.149 libtoolize: copying file 'm4/ltoptions.m4'
#20 6.206 libtoolize: copying file 'm4/ltsugar.m4'
#20 6.262 libtoolize: copying file 'm4/ltversion.m4'
#20 6.318 libtoolize: copying file 'm4/lt~obsolete.m4'
#20 8.451 autoreconf: running: /usr/bin/autoconf --force
#20 9.333 autoreconf: running: /usr/bin/autoheader --force
#20 9.990 autoreconf: running: automake --add-missing --copy --force-missing
#20 10.90 configure.ac:44: installing './ar-lib'
#20 10.90 configure.ac:39: installing './compile'
#20 10.90 configure.ac:51: installing './config.guess'
#20 10.91 configure.ac:51: installing './config.sub'
#20 10.91 configure.ac:29: installing './install-sh'
#20 10.91 configure.ac:29: installing './missing'
#20 10.94 Makefile.am: installing './INSTALL'
#20 10.96 Makefile.am: installing './depcomp'
#20 11.31 autoreconf: Leaving directory `.'
#20 11.32 
#20 11.32 You can now run './configure --help' to see possible configuration options.
#20 11.32 Otherwise process the configure script to create the makefiles and generated helper files.
#20 11.32 
#20 11.32 + ./configure --disable-doxygen --disable-manpages
#20 11.53 checking for a BSD-compatible install... /usr/bin/install -c
#20 11.55 checking whether build environment is sane... yes
#20 11.56 checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
#20 11.57 checking for gawk... no
#20 11.57 checking for mawk... mawk
#20 11.57 checking whether make sets $(MAKE)... yes
#20 11.59 checking whether make supports nested variables... yes
#20 11.60 checking for pkg-config... /usr/bin/pkg-config
#20 11.60 checking pkg-config is at least version 0.20... yes
#20 11.60 checking whether make supports nested variables... (cached) yes
#20 11.61 checking whether to enable assertions... yes
#20 11.61 checking for gcc... clang
#20 11.68 checking whether the C compiler works... yes
#20 11.80 checking for C compiler default output file name... a.out
#20 11.80 checking for suffix of executables... 
#20 11.93 checking whether we are cross compiling... no
#20 12.07 checking for suffix of object files... o
#20 12.10 checking whether we are using the GNU C compiler... yes
#20 12.12 checking whether clang accepts -g... yes
#20 12.15 checking for clang option to accept ISO C89... none needed
#20 12.19 checking whether clang understands -c and -o together... yes
#20 12.23 checking whether make supports the include directive... yes (GNU style)
#20 12.25 checking dependency style of clang... gcc3
#20 12.31 checking for a sed that does not truncate output... /usr/bin/sed
#20 12.31 checking for ar... ar
#20 12.32 checking the archiver (ar) interface... ar
#20 12.35 checking whether ln -s works... yes
#20 12.35 checking how to run the C preprocessor... clang -E
#20 12.45 checking for grep that handles long lines and -e... /usr/bin/grep
#20 12.46 checking for egrep... /usr/bin/grep -E
#20 12.46 checking for ANSI C header files... yes
#20 12.70 checking for sys/types.h... yes
#20 12.76 checking for sys/stat.h... yes
#20 12.81 checking for stdlib.h... yes
#20 12.87 checking for string.h... yes
#20 12.93 checking for memory.h... yes
#20 12.99 checking for strings.h... yes
#20 13.05 checking for inttypes.h... yes
#20 13.11 checking for stdint.h... yes
#20 13.17 checking for unistd.h... yes
#20 13.24 checking whether byte ordering is bigendian... no
#20 13.37 checking build system type... x86_64-pc-linux-gnu
#20 13.44 checking host system type... x86_64-pc-linux-gnu
#20 13.44 checking how to print strings... printf
#20 13.50 checking for a sed that does not truncate output... (cached) /usr/bin/sed
#20 13.50 checking for fgrep... /usr/bin/grep -F
#20 13.51 checking for ld used by clang... /usr/bin/ld
#20 13.53 checking if the linker (/usr/bin/ld) is GNU ld... yes
#20 13.53 checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
#20 13.54 checking the name lister (/usr/bin/nm -B) interface... BSD nm
#20 13.57 checking the maximum length of command line arguments... 1572864
#20 13.58 checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
#20 13.58 checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
#20 13.58 checking for /usr/bin/ld option to reload object files... -r
#20 13.58 checking for objdump... objdump
#20 13.58 checking how to recognize dependent libraries... pass_all
#20 13.59 checking for dlltool... no
#20 13.59 checking how to associate runtime and link libraries... printf %s\n
#20 13.59 checking for archiver @FILE support... @
#20 13.64 checking for strip... strip
#20 13.64 checking for ranlib... ranlib
#20 13.64 checking command to parse /usr/bin/nm -B output from clang object... ok
#20 13.81 checking for sysroot... no
#20 13.81 checking for a working dd... /usr/bin/dd
#20 13.82 checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
#20 13.85 checking for mt... no
#20 13.85 checking if : is a manifest tool... no
#20 13.86 checking for dlfcn.h... yes
#20 13.92 checking for objdir... .libs
#20 14.09 checking if clang supports -fno-rtti -fno-exceptions... yes
#20 14.12 checking for clang option to produce PIC... -fPIC -DPIC
#20 14.12 checking if clang PIC flag -fPIC -DPIC works... yes
#20 14.16 checking if clang static flag -static works... yes
#20 14.34 checking if clang supports -c -o file.o... yes
#20 14.39 checking if clang supports -c -o file.o... (cached) yes
#20 14.39 checking whether the clang linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
#20 14.41 checking whether -lc should be explicitly linked in... no
#20 14.48 checking dynamic linker characteristics... GNU/Linux ld.so
#20 14.66 checking how to hardcode library paths into programs... immediate
#20 14.66 checking whether stripping libraries is possible... yes
#20 14.66 checking if libtool supports shared libraries... yes
#20 14.66 checking whether to build shared libraries... yes
#20 14.66 checking whether to build static libraries... yes
#20 14.66 checking whether C compiler accepts -Wlogical-op... no
#20 14.69 checking whether C compiler accepts -fdiagnostics-color... yes
#20 14.72 checking whether C compiler accepts -Wunused-result... yes
#20 14.76 checking whether the linker accepts -Wl,--version-script=./libcoap-3.map... yes
#20 14.89 checking for GnuTLS... no
#20 14.90 checking for OpenSSL... no
#20 14.92 checking for mbedtls_version_get_string in -lmbedtls... no
#20 14.99 configure: error: ==> Option '--enable-dtls' is set but none of the needed cryptography libraries GnuTLS, OpenSSL or Mbed TLS could be found!
#20 14.99                         Install at least one of the package(s) that contains the development files for GnuTLS (>= 3.3.0), OpenSSL(>= 1.1.0), or Mbed TLS(>= 2.7.10)
#20 14.99                         or disable the DTLS support using '--disable-dtls'.
#20 15.06 + for file in $SRC/*target.c
#20 15.06 ++ basename /src/pdu_parse_target.c _target.c
#20 15.06 + b=pdu_parse
#20 15.06 + clang -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument -O3 -fsanitize-coverage=trace-pc-guard -c /src/pdu_parse_target.c -I include/coap -o /out/pdu_parse_target.o
#20 15.08 /src/pdu_parse_target.c:19:10: fatal error: 'coap.h' file not found
#20 15.08 #include <coap.h>
#20 15.08          ^~~~~~~~
#20 15.08 1 error generated.
#20 15.08 Traceback (most recent call last):
#20 15.08   File "<string>", line 1, in <module>
#20 15.08   File "/src/fuzzers/afl/fuzzer.py", line 40, in build
#20 15.08     utils.build_benchmark()
#20 15.08   File "/src/fuzzers/utils.py", line 82, in build_benchmark
#20 15.08     subprocess.check_call(['/bin/bash', '-ex', build_script], env=env)
#20 15.08   File "/usr/local/lib/python3.8/subprocess.py", line 364, in check_call
#20 15.08     raise CalledProcessError(retcode, cmd)
#20 15.08 subprocess.CalledProcessError: Command '['/bin/bash', '-ex', '/src/build.sh']' returned non-zero exit status 1.
#20 ERROR: executor failed running [/bin/sh -c echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi]: exit code: 1
------
 > importing cache manifest from gcr.io/fuzzbench/builders/afl/libcoap_libcoap:
------
------
 > [stage-1 13/13] RUN echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi:
------
executor failed running [/bin/sh -c echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi]: exit code: 1
make: *** [docker/generated.mk:2798507: .afl-libcoap_libcoap-builder] Error 1
/bin/sh: 1: source: not found
#1 [internal] load build definition from Dockerfile
#1 sha256:90b1c69015031429d6218ef612dd4b9407dde0f50394d8434e594c89af5ee72b
#1 transferring dockerfile: 32B done
#1 DONE 0.3s

#2 [internal] load .dockerignore
#2 sha256:57b60cbb249b70226930f16eb119f7993d63c9b16c6a0a0274d5db9e62b856ac
#2 transferring context: 2B done
#2 DONE 0.3s

#3 [internal] load metadata for gcr.io/oss-fuzz-base/base-builder:latest
#3 sha256:f10dc39cc9d418a5bc416dead31a1902b6821fdae909cd3b08f7a3fd1faba7b5
#3 DONE 0.6s

#5 [1/5] FROM gcr.io/oss-fuzz-base/base-builder@sha256:41d7bbe7827592680a606c9bba1aeb6e23c7502ce8b633923b06542f4c706e7c
#5 sha256:660db69324ed478291dd329cbbfe422dccbc173f9ab806c069fac341073eab8c
#5 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/builders/benchmark/libcoap_libcoap
#4 sha256:5e75753f93ff8db33014dbd0aec29d403fa6039611fef397ee4f33c3e697d965
#4 DONE 0.0s

#9 [internal] load build context
#9 sha256:fbd858dbd24afeb5888f073b1a0ac758dfbba3f006e402f71f97adb4e47b98d3
#9 transferring context: 68B done
#9 DONE 0.1s

#7 [3/5] RUN git clone --depth 1 https://github.com/obgm/libcoap.git libcoap
#7 sha256:a480433fe3d0880f9edbb4289088e3750b84f675b89ff49676e912978ae81eca
#7 CACHED

#8 [4/5] WORKDIR libcoap
#8 sha256:71ad700559604b0b014766cbd3e9a5cdd51b2a2e451b805735ddecf637d80670
#8 CACHED

#6 [2/5] RUN apt-get update && apt-get install -y make autoconf automake libtool     pkg-config
#6 sha256:5957c15ea336e23163a53d9a7d223df93727b6605daf7ffa1f89b698ccaa12ce
#6 CACHED

#10 [5/5] COPY build.sh *_target.c /src/
#10 sha256:103a4b43dbf361ff9c70f05bc87123df137755c72b44b5f1a2b37f1004c99538
#10 CACHED

#11 exporting to image
#11 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#11 exporting layers done
#11 writing image sha256:5f41d015c85380fefe0e52739df9f7edfe5934eea9dba6a1ce3ffe6334c8d74d
#11 writing image sha256:5f41d015c85380fefe0e52739df9f7edfe5934eea9dba6a1ce3ffe6334c8d74d 0.0s done
#11 naming to gcr.io/fuzzbench/builders/benchmark/libcoap_libcoap done
#11 DONE 0.3s

#12 exporting cache
#12 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#12 preparing build cache for export done
#12 DONE 0.0s
#1 [internal] load build definition from builder.Dockerfile
#1 sha256:34ccab5254aa0c180c4783ab01d3dc55e5dc9015a5b836f2b9a94fa21c9a11cd
#1 transferring dockerfile: 46B done
#1 DONE 0.1s

#2 [internal] load .dockerignore
#2 sha256:8925678e3647872d7d4ec8a9889ce74de6992d462fe545b7f25be32451a03680
#2 transferring context: 2B done
#2 DONE 0.1s

#3 [internal] load metadata for gcr.io/fuzzbench/builders/benchmark/libcoap_libcoap:latest
#3 sha256:f0a4a40bdc7ad5f3041f8e3800a4c8e0edf3e896fe9f9c03b18860010b6f5c7b
#3 DONE 0.0s

#5 [1/3] FROM gcr.io/fuzzbench/builders/benchmark/libcoap_libcoap
#5 sha256:4cf9839dfd59add16745f804cfe5fbdd568b9793b927f1b73d04fd2fc6fb54e8
#5 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/builders/afl/libcoap_libcoap-intermediate
#4 sha256:b4b38bb8d46d630c9205058e12d86f18ba302f148051749aab15f8dd8fdbc29d
#4 DONE 0.0s

#6 [2/3] RUN git clone https://github.com/google/AFL.git /afl &&     cd /afl &&     git checkout 61037103ae3722c8060ff7082994836a794f978e &&     AFL_NO_X86=1 make
#6 sha256:9b82135892ba69945294bcbecb56d8206a6b5e3575a6cdcb35386419f7b50d0e
#6 CACHED

#7 [3/3] RUN apt-get update &&     apt-get install wget -y &&     wget https://raw.githubusercontent.com/llvm/llvm-project/5feb80e748924606531ba28c97fe65145c65372e/compiler-rt/lib/fuzzer/afl/afl_driver.cpp -O /afl/afl_driver.cpp &&     clang -Wno-pointer-sign -c /afl/llvm_mode/afl-llvm-rt.o.c -I/afl &&     clang++ -stdlib=libc++ -std=c++11 -O2 -c /afl/afl_driver.cpp &&     ar r /libAFL.a *.o
#7 sha256:6eda95f373fabb4a9c8bc9c95b39d476fa1602db0942f67726161818a12641b8
#7 CACHED

#8 exporting to image
#8 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#8 exporting layers done
#8 writing image sha256:67354019bff3bc00747aeb3d6690ff97f7ea8c2be3899cf6d8664d00ed3e71cd
#8 writing image sha256:67354019bff3bc00747aeb3d6690ff97f7ea8c2be3899cf6d8664d00ed3e71cd 0.0s done
#8 naming to gcr.io/fuzzbench/builders/afl/libcoap_libcoap-intermediate done
#8 DONE 0.3s

#9 exporting cache
#9 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#9 preparing build cache for export done
#9 DONE 0.0s
#1 [internal] load build definition from Dockerfile
#1 sha256:2572c2f77e777d39162ef1eb3f1c6c02281155412cadff42b8aa0b06131a40b6
#1 transferring dockerfile: 2.00kB done
#1 DONE 0.3s

#2 [internal] load .dockerignore
#2 sha256:33a133b45fb7213480e2857e029363a17523796c96103c7a275c24f04367c891
#2 transferring context: 34B done
#2 DONE 0.3s

#3 [internal] load metadata for docker.io/library/ubuntu:xenial
#3 sha256:f62bae18ed588840f045c881b2502661f2a89578a2f8f99b83f5200ee83dd25b
#3 DONE 0.0s

#4 importing cache manifest from gcr.io/fuzzbench/base-image
#4 sha256:9b220ebb4d4daceed1b96df9b6dca076e762f1cd612574f010b82d5b9e5ad896
#4 DONE 0.0s

#5 [1/7] FROM docker.io/library/ubuntu:xenial
#5 sha256:14dd403f25ae9e519bd44f27dc17af7ce80f5a4f9f48ca88108364e67ec5d360
#5 DONE 0.0s

#8 [internal] load build context
#8 sha256:4b13bb7aef7823dc0db11af56520c4a1248e03ac877dcde2f74aaa2b717b41ed
#8 transferring context: 559B 0.0s done
#8 DONE 0.1s

#9 [4/7] COPY ./requirements.txt /
#9 sha256:77b7ae8a3f7f95e0709c2324ad5aa735145e3c066f6680c3aac9e79d066a5485
#9 CACHED

#10 [5/7] RUN pip3 install -r /requirements.txt
#10 sha256:f360e96bfbe1a9a70891f0dbba1e3e18ade41c9564e474be1bb9fb5f07de580d
#10 CACHED

#11 [6/7] RUN apt-get update -y && apt-get install -y     apt-transport-https     lsb-release
#11 sha256:a35fac88a2422f5b9e881b14931d3f0aa573953ff1a35c643fd55cc4ae23a15a
#11 CACHED

#6 [2/7] RUN apt-get update -y && apt-get install -y     build-essential     rsync     curl     zlib1g-dev     libncurses5-dev     libgdbm-dev     libnss3-dev     libssl-dev     libreadline-dev     libffi-dev     virtualenv     libbz2-dev     liblzma-dev     libsqlite3-dev
#6 sha256:3a1b0960f17eed529eaae93dc8fd3554f2743dd584d8fa569cdbe6bc734371ac
#6 CACHED

#7 [3/7] RUN cd /tmp/ &&     curl -O https://www.python.org/ftp/python/3.8.6/Python-3.8.6.tar.xz &&     tar -xvf Python-3.8.6.tar.xz &&     cd Python-3.8.6 &&     ./configure --enable-loadable-sqlite-extensions --enable-optimizations &&     make -j install &&     rm -r /tmp/Python-3.8.6.tar.xz /tmp/Python-3.8.6
#7 sha256:c5b9d1fb3371e84dbc60b76e7b2f8d5913bc93bcd4910ab65daa03e7b2ec4bb0
#7 CACHED

#12 [7/7] RUN CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" &&     echo "deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main"     | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list &&     curl https://packages.cloud.google.com/apt/doc/apt-key.gpg     | apt-key add - &&     apt-get update -y &&     apt-get install -y google-cloud-sdk
#12 sha256:4b2221024bb177bdf49945a843894ccf1134bbe0c15b8d3b3209e42af93e682a
#12 CACHED

#13 exporting to image
#13 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#13 exporting layers done
#13 writing image sha256:7d9957eb6f280da9248cb8afce2961dbcb27e41d89cdfd8167167cb748135959 0.0s done
#13 naming to gcr.io/fuzzbench/base-image done
#13 DONE 0.1s

#14 exporting cache
#14 sha256:2700d4ef94dee473593c5c614b55b2dedcca7893909811a8f2b48291a1f581e4
#14 preparing build cache for export done
#14 DONE 0.0s
#1 [internal] load build definition from Dockerfile
#1 sha256:91772267254ec0fae1529201559c432eb6e9f46b5962a651fd4c6397f2d58f22
#1 transferring dockerfile: 2.22kB done
#1 DONE 0.1s

#2 [internal] load .dockerignore
#2 sha256:7f25fd6e709b07c63e48697280bb8d5f241ee22c9bba57b95d953a6a248a84df
#2 transferring context: 34B done
#2 DONE 0.1s

#4 [internal] load metadata for gcr.io/fuzzbench/base-image:latest
#4 sha256:932022888f650cc455b10eb5123bb08c0cccacac29a693e69314abbfd28a72c3
#4 DONE 0.0s

#3 [internal] load metadata for gcr.io/fuzzbench/builders/afl/libcoap_libcoap-intermediate:latest
#3 sha256:6ef438917449281df559796ed243d0351a1c533a4801f5995b07b989e04f0e7c
#3 DONE 0.0s

#5 importing cache manifest from gcr.io/fuzzbench/builders/afl/libcoap_libcoap
#5 sha256:a60b6769d548e5569b5b114c9e7ecefb82b4bf2ebb40e3f464c1c64d9bec9d02
#5 ...

#12 [internal] load build context
#12 sha256:055fd338a7cf48f0a3934f8ca2a36ff1f1312b53233695d8ef3e75d48af06817
#12 DONE 0.0s

#7 [base-image 1/1] FROM gcr.io/fuzzbench/base-image
#7 sha256:4d07825694520f8b6f6a0d8592dbd345433361ae044cb7f06706c5a95e3daaad
#7 DONE 0.0s

#6 [stage-1  1/13] FROM gcr.io/fuzzbench/builders/afl/libcoap_libcoap-intermediate
#6 sha256:af71f9dc5ff013ae780c772b210eff8b0027db7277041b4f2f7b88611fb54e27
#6 DONE 0.0s

#5 importing cache manifest from gcr.io/fuzzbench/builders/afl/libcoap_libcoap
#5 sha256:a60b6769d548e5569b5b114c9e7ecefb82b4bf2ebb40e3f464c1c64d9bec9d02
#5 ERROR: gcr.io/fuzzbench/builders/afl/libcoap_libcoap:latest: not found

#12 [internal] load build context
#12 sha256:055fd338a7cf48f0a3934f8ca2a36ff1f1312b53233695d8ef3e75d48af06817
#12 transferring context: 669.87kB 0.1s done
#12 DONE 0.2s

#18 [stage-1 11/13] RUN export CHECKOUT_COMMIT=$(cat /benchmark.yaml | tr -d ' ' | grep 'commit:' | cut -d ':' -f2) &&     python3 -u /opt/fuzzbench/checkout_commit.py $CHECKOUT_COMMIT /src
#18 sha256:0bc86e81d3b99c87ac8232801321151ece2861665066e41b33e9819c30c70f5b
#18 CACHED

#16 [stage-1  9/13] RUN mkdir /opt/fuzzbench/
#16 sha256:3a43e8140bc6f21760f53bda25d493ac0a7472d322fc3701e4d807aaf7d309e5
#16 CACHED

#10 [stage-1  4/13] COPY --from=base-image /usr/local/include/python3.8 /usr/local/include/python3.8
#10 sha256:840c65a50aa08f63d105cf9eff04d95778e3dbcaca2c4a1e07cff0e80805f6ee
#10 CACHED

#15 [stage-1  8/13] COPY benchmarks/libcoap_libcoap/benchmark.yaml /
#15 sha256:7d705c9d9df76b2a1442b5988859a50e765b6d58070f91467b3efd8cef2203bb
#15 CACHED

#17 [stage-1 10/13] COPY docker/benchmark-builder/checkout_commit.py /opt/fuzzbench/
#17 sha256:191af10af91b2c92ab4cac09dc06a22c660232a41da40d5d024ed4e5eb084312
#17 CACHED

#11 [stage-1  5/13] COPY --from=base-image /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
#11 sha256:310314d9daea97a6a18b9e38417954a249cbbc2a3ba44fe2e5cf011449ef1b63
#11 CACHED

#13 [stage-1  6/13] COPY fuzzers /src/fuzzers
#13 sha256:db597b24a7e3e39856ef4abb31ddb7f5915403024d3cb4315235742499ad4f40
#13 CACHED

#14 [stage-1  7/13] RUN touch /src/__init__.py
#14 sha256:4aec28d1a741176259b9ae6894c5339654404c88c1e9680c32c8776a2e8ddfc1
#14 CACHED

#9 [stage-1  3/13] COPY --from=base-image /usr/local/lib/python3.8 /usr/local/lib/python3.8
#9 sha256:93b4e719d4793f2c72542d9d5cc02e060c91437b0345d3a137dd6f73ad24edc6
#9 CACHED

#8 [stage-1  2/13] COPY --from=base-image /usr/local/bin/python3* /usr/local/bin/
#8 sha256:3f22becf8e381308d528b9c485c2ba4598189d0a7fae1ca41895d47d3c5285e3
#8 CACHED

#19 [stage-1 12/13] RUN echo "#!/bin/bash\nPYTHONPATH=/src python3 -u -c "from fuzzers import utils; utils.initialize_env(); from fuzzers.afl import fuzzer; fuzzer.build()"" > /usr/bin/fuzzer_build &&     chmod +x /usr/bin/fuzzer_build
#19 sha256:036b1cead9ad0393e80c82a515b7f222f01f80976974cded5d8db892f47edd7f
#19 CACHED

#20 [stage-1 13/13] RUN echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi
#20 sha256:457195181021b24b0fc7bdb68f7808604e4ea44efb007191fa36cc0e6fe9f665
#20 0.515 Run fuzzer_build to build the target
#20 0.629 FUZZ_TARGET = libcoap
#20 0.629 CFLAGS = -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument -O3
#20 0.629 CXXFLAGS = -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument -stdlib=libc++ -O3
#20 0.634 Building benchmark libcoap_libcoap with fuzzer afl
#20 0.636 + ./autogen.sh
#20 0.637 
#20 0.637 [HINT] You can run 'autogen.sh --clean' to remove all generated files by the autotools.
#20 0.637 
#20 0.639 Found 'autoconf'.
#20 0.641 Found 'aclocal'.
#20 0.643 Found 'pkg-config'.
#20 0.645 
#20 0.645 Couldn't find 'libtool'!
#20 0.647 Found 'libtoolize'.
#20 0.647 
#20 0.647   --->  Found all needed tools! That's fine.
#20 0.647 
#20 0.650 Generating needed autotools files for libcoap by running autoreconf ...
#20 0.984 autoreconf: Entering directory `.'
#20 0.989 autoreconf: configure.ac: not using Gettext
#20 1.989 autoreconf: running: aclocal --force ${ACLOCAL_FLAGS} -I m4
#20 4.089 autoreconf: configure.ac: tracing
#20 4.747 autoreconf: configure.ac: adding subdirectory ext/tinydtls to autoreconf
#20 4.749 autoreconf: Entering directory `ext/tinydtls'
#20 4.749 autoreconf: configure.ac: not using Autoconf
#20 4.749 autoreconf: Leaving directory `ext/tinydtls'
#20 4.749 autoreconf: running: libtoolize --copy --force
#20 5.080 libtoolize: putting auxiliary files in '.'.
#20 5.080 libtoolize: copying file './ltmain.sh'
#20 5.123 libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
#20 5.123 libtoolize: copying file 'm4/libtool.m4'
#20 5.177 libtoolize: copying file 'm4/ltoptions.m4'
#20 5.232 libtoolize: copying file 'm4/ltsugar.m4'
#20 5.289 libtoolize: copying file 'm4/ltversion.m4'
#20 5.344 libtoolize: copying file 'm4/lt~obsolete.m4'
#20 7.483 autoreconf: running: /usr/bin/autoconf --force
#20 8.372 autoreconf: running: /usr/bin/autoheader --force
#20 8.989 autoreconf: running: automake --add-missing --copy --force-missing
#20 9.950 configure.ac:44: installing './ar-lib'
#20 9.954 configure.ac:39: installing './compile'
#20 9.957 configure.ac:51: installing './config.guess'
#20 9.960 configure.ac:51: installing './config.sub'
#20 9.963 configure.ac:29: installing './install-sh'
#20 9.967 configure.ac:29: installing './missing'
#20 9.992 Makefile.am: installing './INSTALL'
#20 10.02 Makefile.am: installing './depcomp'
#20 10.36 autoreconf: Leaving directory `.'
#20 10.37 
#20 10.37 You can now run './configure --help' to see possible configuration options.
#20 10.37 Otherwise process the configure script to create the makefiles and generated helper files.
#20 10.37 
#20 10.37 + ./configure --disable-doxygen --disable-manpages
#20 10.58 checking for a BSD-compatible install... /usr/bin/install -c
#20 10.60 checking whether build environment is sane... yes
#20 10.61 checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
#20 10.62 checking for gawk... no
#20 10.62 checking for mawk... mawk
#20 10.62 checking whether make sets $(MAKE)... yes
#20 10.64 checking whether make supports nested variables... yes
#20 10.65 checking for pkg-config... /usr/bin/pkg-config
#20 10.65 checking pkg-config is at least version 0.20... yes
#20 10.65 checking whether make supports nested variables... (cached) yes
#20 10.65 checking whether to enable assertions... yes
#20 10.66 checking for gcc... clang
#20 10.72 checking whether the C compiler works... yes
#20 10.85 checking for C compiler default output file name... a.out
#20 10.85 checking for suffix of executables... 
#20 10.97 checking whether we are cross compiling... no
#20 11.11 checking for suffix of object files... o
#20 11.14 checking whether we are using the GNU C compiler... yes
#20 11.17 checking whether clang accepts -g... yes
#20 11.20 checking for clang option to accept ISO C89... none needed
#20 11.24 checking whether clang understands -c and -o together... yes
#20 11.28 checking whether make supports the include directive... yes (GNU style)
#20 11.30 checking dependency style of clang... gcc3
#20 11.36 checking for a sed that does not truncate output... /usr/bin/sed
#20 11.37 checking for ar... ar
#20 11.37 checking the archiver (ar) interface... ar
#20 11.40 checking whether ln -s works... yes
#20 11.40 checking how to run the C preprocessor... clang -E
#20 11.50 checking for grep that handles long lines and -e... /usr/bin/grep
#20 11.51 checking for egrep... /usr/bin/grep -E
#20 11.51 checking for ANSI C header files... yes
#20 11.76 checking for sys/types.h... yes
#20 11.82 checking for sys/stat.h... yes
#20 11.87 checking for stdlib.h... yes
#20 11.93 checking for string.h... yes
#20 11.99 checking for memory.h... yes
#20 12.05 checking for strings.h... yes
#20 12.11 checking for inttypes.h... yes
#20 12.17 checking for stdint.h... yes
#20 12.23 checking for unistd.h... yes
#20 12.29 checking whether byte ordering is bigendian... no
#20 12.43 checking build system type... x86_64-pc-linux-gnu
#20 12.51 checking host system type... x86_64-pc-linux-gnu
#20 12.51 checking how to print strings... printf
#20 12.57 checking for a sed that does not truncate output... (cached) /usr/bin/sed
#20 12.57 checking for fgrep... /usr/bin/grep -F
#20 12.57 checking for ld used by clang... /usr/bin/ld
#20 12.59 checking if the linker (/usr/bin/ld) is GNU ld... yes
#20 12.60 checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
#20 12.60 checking the name lister (/usr/bin/nm -B) interface... BSD nm
#20 12.63 checking the maximum length of command line arguments... 1572864
#20 12.65 checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
#20 12.65 checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
#20 12.65 checking for /usr/bin/ld option to reload object files... -r
#20 12.65 checking for objdump... objdump
#20 12.65 checking how to recognize dependent libraries... pass_all
#20 12.65 checking for dlltool... no
#20 12.65 checking how to associate runtime and link libraries... printf %s\n
#20 12.65 checking for archiver @FILE support... @
#20 12.71 checking for strip... strip
#20 12.71 checking for ranlib... ranlib
#20 12.71 checking command to parse /usr/bin/nm -B output from clang object... ok
#20 12.89 checking for sysroot... no
#20 12.90 checking for a working dd... /usr/bin/dd
#20 12.90 checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
#20 12.94 checking for mt... no
#20 12.94 checking if : is a manifest tool... no
#20 12.95 checking for dlfcn.h... yes
#20 13.01 checking for objdir... .libs
#20 13.17 checking if clang supports -fno-rtti -fno-exceptions... yes
#20 13.20 checking for clang option to produce PIC... -fPIC -DPIC
#20 13.20 checking if clang PIC flag -fPIC -DPIC works... yes
#20 13.23 checking if clang static flag -static works... yes
#20 13.41 checking if clang supports -c -o file.o... yes
#20 13.45 checking if clang supports -c -o file.o... (cached) yes
#20 13.45 checking whether the clang linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
#20 13.48 checking whether -lc should be explicitly linked in... no
#20 13.54 checking dynamic linker characteristics... GNU/Linux ld.so
#20 13.71 checking how to hardcode library paths into programs... immediate
#20 13.71 checking whether stripping libraries is possible... yes
#20 13.71 checking if libtool supports shared libraries... yes
#20 13.71 checking whether to build shared libraries... yes
#20 13.71 checking whether to build static libraries... yes
#20 13.71 checking whether C compiler accepts -Wlogical-op... no
#20 13.76 checking whether C compiler accepts -fdiagnostics-color... yes
#20 13.79 checking whether C compiler accepts -Wunused-result... yes
#20 13.82 checking whether the linker accepts -Wl,--version-script=./libcoap-3.map... yes
#20 13.95 checking for GnuTLS... no
#20 13.97 checking for OpenSSL... no
#20 13.98 checking for mbedtls_version_get_string in -lmbedtls... no
#20 14.21 configure: error: ==> Option '--enable-dtls' is set but none of the needed cryptography libraries GnuTLS, OpenSSL or Mbed TLS could be found!
#20 14.21                         Install at least one of the package(s) that contains the development files for GnuTLS (>= 3.3.0), OpenSSL(>= 1.1.0), or Mbed TLS(>= 2.7.10)
#20 14.21                         or disable the DTLS support using '--disable-dtls'.
#20 14.29 + for file in $SRC/*target.c
#20 14.29 ++ basename /src/pdu_parse_target.c _target.c
#20 14.29 + b=pdu_parse
#20 14.29 + clang -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -pthread -Wl,--no-as-needed -Wl,-ldl -Wl,-lm -Wno-unused-command-line-argument -O3 -fsanitize-coverage=trace-pc-guard -c /src/pdu_parse_target.c -I include/coap -o /out/pdu_parse_target.o
#20 14.30 /src/pdu_parse_target.c:19:10: fatal error: 'coap.h' file not found
#20 14.30 #include <coap.h>
#20 14.30          ^~~~~~~~
#20 14.30 1 error generated.
#20 14.30 Traceback (most recent call last):
#20 14.30   File "<string>", line 1, in <module>
#20 14.30   File "/src/fuzzers/afl/fuzzer.py", line 40, in build
#20 14.30     utils.build_benchmark()
#20 14.30   File "/src/fuzzers/utils.py", line 82, in build_benchmark
#20 14.30     subprocess.check_call(['/bin/bash', '-ex', build_script], env=env)
#20 14.30   File "/usr/local/lib/python3.8/subprocess.py", line 364, in check_call
#20 14.30     raise CalledProcessError(retcode, cmd)
#20 14.30 subprocess.CalledProcessError: Command '['/bin/bash', '-ex', '/src/build.sh']' returned non-zero exit status 1.
#20 ERROR: executor failed running [/bin/sh -c echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi]: exit code: 1
------
 > importing cache manifest from gcr.io/fuzzbench/builders/afl/libcoap_libcoap:
------
------
 > [stage-1 13/13] RUN echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi:
------
executor failed running [/bin/sh -c echo "Run fuzzer_build to build the target" && if [ -z "$debug_builder" ] ; then fuzzer_build; fi]: exit code: 1
make: *** [docker/generated.mk:2798507: .afl-libcoap_libcoap-builder] Error 1
