source .venv/bin/activate && PYTHONPATH=. python3 docker/generate_makefile.py docker/generated.mk
docker build \
--tag gcr.io/fuzzbench/builders/benchmark/libarchive_libarchive_fuzzer \
--build-arg BUILDKIT_INLINE_CACHE=1 \
--cache-from gcr.io/fuzzbench/builders/benchmark/libarchive_libarchive_fuzzer \
--file benchmarks/libarchive_libarchive_fuzzer/Dockerfile \
benchmarks/libarchive_libarchive_fuzzer
docker build \
--tag gcr.io/fuzzbench/builders/afl/libarchive_libarchive_fuzzer-intermediate \
--build-arg BUILDKIT_INLINE_CACHE=1 \
--cache-from gcr.io/fuzzbench/builders/afl/libarchive_libarchive_fuzzer-intermediate \
--build-arg parent_image=gcr.io/fuzzbench/builders/benchmark/libarchive_libarchive_fuzzer \
--file fuzzers/afl/builder.Dockerfile \
fuzzers/afl
docker pull ubuntu:xenial
xenial: Pulling from library/ubuntu
Digest: sha256:20858ebbc96215d6c3c574f781133ebffdc7c18d98af4f294cc4c04871a6fe61
Status: Image is up to date for ubuntu:xenial
docker.io/library/ubuntu:xenial
docker build \
--tag gcr.io/fuzzbench/base-image \
--build-arg BUILDKIT_INLINE_CACHE=1 \
--cache-from gcr.io/fuzzbench/base-image \
--file docker/base-image/Dockerfile \
.
docker build \
--tag gcr.io/fuzzbench/builders/afl/libarchive_libarchive_fuzzer \
--build-arg BUILDKIT_INLINE_CACHE=1 \
--cache-from gcr.io/fuzzbench/builders/afl/libarchive_libarchive_fuzzer \
--build-arg benchmark=libarchive_libarchive_fuzzer \
--build-arg fuzzer=afl \
--build-arg parent_image=gcr.io/fuzzbench/builders/afl/libarchive_libarchive_fuzzer-intermediate \
--file docker/benchmark-builder/Dockerfile \
.
docker build \
--tag gcr.io/fuzzbench/runners/afl/libarchive_libarchive_fuzzer-intermediate \
--build-arg BUILDKIT_INLINE_CACHE=1 \
--cache-from gcr.io/fuzzbench/runners/afl/libarchive_libarchive_fuzzer-intermediate \
--file fuzzers/afl/runner.Dockerfile \
fuzzers/afl
docker build \
--tag gcr.io/fuzzbench/runners/afl/libarchive_libarchive_fuzzer \
--build-arg BUILDKIT_INLINE_CACHE=1 \
--cache-from gcr.io/fuzzbench/runners/afl/libarchive_libarchive_fuzzer \
--build-arg benchmark=libarchive_libarchive_fuzzer \
--build-arg fuzzer=afl \
--file docker/benchmark-runner/Dockerfile \
.
docker run \
--cpus=1 \
--cap-add SYS_NICE \
--cap-add SYS_PTRACE \
-e FUZZ_OUTSIDE_EXPERIMENT=1 \
-e FORCE_LOCAL=1 \
-e TRIAL_ID=1 \
-e FUZZER=afl \
-e BENCHMARK=libarchive_libarchive_fuzzer \
-e FUZZ_TARGET=libarchive_fuzzer \
-e MAX_TOTAL_TIME=20 \
-e SNAPSHOT_PERIOD=10 \
gcr.io/fuzzbench/runners/afl/libarchive_libarchive_fuzzer
[run_afl_fuzz] Running target with afl-fuzz
[run_afl_fuzz] Running command: ./afl-fuzz -i /out/seeds -o /out/corpus -m none -t 1000+ -d -- /out/libarchive_fuzzer 2147483647
[0;36mafl-fuzz [1;97m2.57b[0m by <lcamtuf@google.com>
[1;92m[+] [0mDisabling the UI because AFL_NO_UI is set.[0m
[1;92m[+] [0mYou have 8 CPU cores and 1 runnable tasks (utilization: 12%).[0m
[1;92m[+] [0mTry parallel jobs - see docs/parallel_fuzzing.txt.[0m
[1;93m[!] [1;97mWARNING: [0mNot binding to a CPU core (AFL_NO_AFFINITY set).[0m
[1;94m[*] [0mChecking core_pattern...[0m

[1;91m[-] [0mHmm, your system is configured to send core dump notifications to an
    external utility. This will cause issues: there will be an extended delay
    between stumbling upon a crash and having this information relayed to the
    fuzzer via the standard waitpid() API.

    To avoid having crashes misinterpreted as timeouts, please log in as root
    and temporarily modify /proc/sys/kernel/core_pattern, like so:

    echo core >/proc/sys/kernel/core_pattern
[1;94m[*] [0mSetting up output directories...[0m
[1;92m[+] [0mOutput directory exists but deemed OK to reuse.[0m
[1;94m[*] [0mDeleting old session data...[0m
[1;92m[+] [0mOutput dir cleanup successful.[0m
[1;94m[*] [0mScanning '/out/seeds'...[0m
[1;94m[*] [0mShuffling queue...[0m
[1;92m[+] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mValidating target binary...[0m
[1;92m[+] [0m[1;95mPersistent mode binary detected.[0m
[1;92m[+] [0m[1;95mDeferred forkserver binary detected.[0m
[1;94m[*] [0mAttempting dry run with 'id:000000,orig:975743e35f0e1c96dcbb9463af9aa8da1a8374a9'...[0m
[1;94m[*] [0mSpinning up the fork server...[0m
[1;92m[+] [0mAll right - fork server is up.[0m
[1;90m    len = 116, map size = 404, exec speed = 592 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000001,orig:4c53dd4f5afe347b17e58c5e4b8d42fc97dcca51'...[0m
[1;90m    len = 167, map size = 362, exec speed = 1078 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000002,orig:b2075cce3a26aa95072b645feb164e13d929ff18'...[0m
[1;90m    len = 173, map size = 567, exec speed = 601 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000003,orig:a7fce296222e7595cea5c4c03f8c5f645bca3c56'...[0m
[1;90m    len = 128, map size = 554, exec speed = 577 us
[0m[1;93m[!] [1;97mWARNING: [0mInstrumentation output varies across runs.[0m
[1;94m[*] [0mAttempting dry run with 'id:000004,orig:fda1c62c545d94c158c2a1ba9ab13cb9d10b39b2'...[0m
[1;90m    len = 203, map size = 503, exec speed = 671 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000005,orig:5df48d3618984d16ddb192216c0eaba11740a113'...[0m
[1;90m    len = 520, map size = 520, exec speed = 447 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000006,orig:534378eb654a124089acad13032b47b688d35a95'...[0m
[1;90m    len = 123, map size = 420, exec speed = 271 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000007,orig:009334fe8a107ee4a466fb5c8c90172e28a6ec43'...[0m
[1;90m    len = 160, map size = 394, exec speed = 420 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000008,orig:b0e96ad3906eddeec63952a4bcf59a5d391a5595'...[0m
[1;90m    len = 251, map size = 471, exec speed = 340 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000009,orig:9445b674d6c13e54feff077b9a45f9d21e0f1a89'...[0m
[1;90m    len = 102, map size = 364, exec speed = 976 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000010,orig:d1bb568bd9f42f7552d98b04aa6cb5e97f34e23f'...[0m
[1;90m    len = 358400, map size = 476, exec speed = 676 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000011,orig:dcc77d5dd628037408fe85e00c3aa8b137986ad2'...[0m
[1;90m    len = 178, map size = 364, exec speed = 1037 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000012,orig:7725af9510699630782b480ebff0c08d74dfef21'...[0m
[1;90m    len = 182, map size = 448, exec speed = 385 us
[0m[1;92m[+] [0mAll test cases processed.[0m

[1;93m[!] [1;97mWARNING: [0m[1;91mSome test cases are huge (350 kB) - see docs/perf_tips.txt![0m
[1;92m[+] [0mHere are some useful stats:

[1;90m    Test case count : [0m13 favored, 1 variable, 13 total
[1;90m       Bitmap range : [0m362 to 567 bits (average: 449.77 bits)
[1;90m        Exec timing : [0m271 to 1078 us (average: 611 us)
[0m
[1;92m[+] [0mAll set and ready to roll![0m
[1;94m[*] [0mEntering queue cycle 1.[0m
[1;94m[*] [0mFuzzing test case #0 (13 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mFuzzing test case #1 (119 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mFuzzing test case #2 (139 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mFuzzing test case #3 (234 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mFuzzing test case #4 (362 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mFuzzing test case #5 (395 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mFuzzing test case #6 (580 total, 0 uniq crashes found)...[0m
